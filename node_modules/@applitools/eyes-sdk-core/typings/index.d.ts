/// <reference types="node" />
export var AccessibilityLevel: Readonly<{
    AA: string;
    AAA: string;
}>;
export var AccessibilityGuidelinesVersion: Readonly<{
    WCAG_2_0: string;
    WCAG_2_1: string;
}>;
export var AccessibilityMatchSettings: typeof import("./lib/config/AccessibilityMatchSettings");
export var AccessibilityRegionType: Readonly<{
    IgnoreContrast: string;
    RegularText: string;
    LargeText: string;
    BoldText: string;
    GraphicalObject: string;
}>;
export var BatchInfo: typeof import("./lib/config/BatchInfo");
export var BrowserType: Readonly<{
    CHROME: string;
    FIREFOX: string;
    IE_11: string;
    IE_10: string;
    EDGE: string;
    EDGE_CHROMIUM: string;
    EDGE_LEGACY: string;
    SAFARI: string;
    CHROME_ONE_VERSION_BACK: string;
    CHROME_TWO_VERSIONS_BACK: string;
    FIREFOX_ONE_VERSION_BACK: string;
    FIREFOX_TWO_VERSIONS_BACK: string;
    SAFARI_ONE_VERSION_BACK: string;
    SAFARI_TWO_VERSIONS_BACK: string;
    EDGE_CHROMIUM_ONE_VERSION_BACK: string;
    EDGE_CHROMIUM_TWO_VERSIONS_BACK: string;
}>;
export var Configuration: typeof import("./lib/config/Configuration");
export var DeviceName: Readonly<{
    Blackberry_PlayBook: string;
    BlackBerry_Z30: string;
    Galaxy_A5: string;
    Galaxy_Note_10: string;
    Galaxy_Note_10_Plus: string;
    Galaxy_Note_2: string;
    Galaxy_Note_3: string;
    Galaxy_Note_4: string;
    Galaxy_Note_8: string;
    Galaxy_Note_9: string;
    Galaxy_S10: string;
    Galaxy_S10_Plus: string;
    Galaxy_S3: string;
    Galaxy_S5: string;
    Galaxy_S8: string;
    Galaxy_S8_Plus: string;
    Galaxy_S9: string;
    Galaxy_S9_Plus: string;
    iPad: string;
    iPad_6th_Gen: string;
    iPad_7th_Gen: string;
    iPad_Air_2: string;
    iPad_Mini: string;
    iPad_Pro: string;
    iPhone_11: string;
    iPhone_11_Pro: string;
    iPhone_11_Pro_Max: string;
    iPhone_4: string;
    iPhone_5SE: string;
    iPhone_6_7_8: string;
    iPhone_6_7_8_Plus: string;
    iPhone_X: string;
    iPhone_XR: string;
    iPhone_XS: string;
    iPhone_XS_Max: string;
    Kindle_Fire_HDX: string;
    Laptop_with_HiDPI_screen: string;
    Laptop_with_MDPI_screen: string;
    Laptop_with_touch: string;
    LG_G6: string;
    LG_Optimus_L70: string;
    Microsoft_Lumia_550: string;
    Microsoft_Lumia_950: string;
    Nexus_10: string;
    Nexus_4: string;
    Nexus_5: string;
    Nexus_5X: string;
    Nexus_6: string;
    Nexus_6P: string;
    Nexus_7: string;
    Nokia_Lumia_520: string;
    Nokia_N9: string;
    OnePlus_7T: string;
    OnePlus_7T_Pro: string;
    Pixel_2: string;
    Pixel_2_XL: string;
    Pixel_3: string;
    Pixel_3_XL: string;
    Pixel_4: string;
    Pixel_4_XL: string;
}>;
export var ExactMatchSettings: typeof import("./lib/config/ExactMatchSettings");
export var FloatingMatchSettings: typeof import("./lib/config/FloatingMatchSettings");
export var ImageMatchSettings: typeof import("./lib/config/ImageMatchSettings");
export var MatchLevel: Readonly<{
    None: string;
    LegacyLayout: string;
    Layout: string;
    Layout2: string;
    Content: string;
    Strict: string;
    Exact: string;
}>;
export var PropertyData: typeof import("./lib/config/PropertyData");
export var ProxySettings: typeof import("./lib/config/ProxySettings");
export var ScreenOrientation: Readonly<{
    PORTRAIT: string;
    LANDSCAPE: string;
}>;
export var SessionType: Readonly<{
    SEQUENTIAL: string;
    PROGRESSION: string;
}>;
export var StitchMode: Readonly<{
    SCROLL: string;
    CSS: string;
}>;
export var IosDeviceName: Readonly<{
    iPhone_11_Pro: string;
    iPhone_11_Pro_Max: string;
    iPhone_11: string;
    iPhone_XR: string;
    iPhone_XS: string;
    iPhone_X: string;
    iPhone_8: string;
    iPhone_7: string;
    iPad_Pro_3: string;
    iPad_7: string;
    iPad_Air_2: string;
}>;
export var IosVersion: Readonly<{
    Latest: string;
}>;
export var DebugScreenshotsProvider: typeof import("./lib/debug/DebugScreenshotsProvider");
export var FileDebugScreenshotsProvider: typeof import("./lib/debug/FileDebugScreenshotsProvider");
export var NullDebugScreenshotProvider: typeof import("./lib/debug/NullDebugScreenshotProvider");
export var EyesError: typeof import("./lib/errors/EyesError");
export var CoordinatesTypeConversionError: typeof import("./lib/errors/CoordinatesTypeConversionError");
export var DiffsFoundError: typeof import("./lib/errors/DiffsFoundError");
export var NewTestError: typeof import("./lib/errors/NewTestError");
export var OutOfBoundsError: typeof import("./lib/errors/OutOfBoundsError");
export var TestFailedError: typeof import("./lib/errors/TestFailedError");
export var EyesDriverOperationError: typeof import("./lib/errors/EyesDriverOperationError");
export var ElementNotFoundError: typeof import("./lib/errors/ElementNotFoundError");
export var CoordinatesType: Readonly<{
    SCREENSHOT_AS_IS: string;
    CONTEXT_AS_IS: string;
    CONTEXT_RELATIVE: string;
}>;
export var Location: typeof import("./lib/geometry/Location");
export var RectangleSize: typeof import("./lib/geometry/RectangleSize");
export var Region: typeof import("./lib/geometry/Region");
export var PropertyHandler: typeof import("./lib/handler/PropertyHandler");
export var ReadOnlyPropertyHandler: typeof import("./lib/handler/ReadOnlyPropertyHandler");
export var SimplePropertyHandler: typeof import("./lib/handler/SimplePropertyHandler");
export var ImageDeltaCompressor: typeof import("./lib/images/ImageDeltaCompressor");
export var MutableImage: typeof import("./lib/images/MutableImage");
export var ConsoleLogHandler: typeof import("./lib/logging/ConsoleLogHandler");
export var DebugLogHandler: typeof import("./lib/logging/DebugLogHandler");
export var FileLogHandler: typeof import("./lib/logging/FileLogHandler");
export var Logger: typeof import("./lib/logging/Logger");
export var LogHandler: typeof import("./lib/logging/LogHandler");
export var NullLogHandler: typeof import("./lib/logging/NullLogHandler");
export var BrowserNames: Readonly<{
    Edge: string;
    IE: string;
    Firefox: string;
    Chrome: string;
    Safari: string;
    Chromium: string;
}>;
export var OSNames: Readonly<{
    Android: string;
    ChromeOS: string;
    IOS: string;
    Linux: string;
    Macintosh: string;
    MacOSX: string;
    Unknown: string;
    Windows: string;
}>;
export var UserAgent: typeof import("./lib/useragent/UserAgent");
export var ArgumentGuard: {
    notEqual: (param: any, value: any, paramName: string) => void;
    alphanumeric: (param: any, paramName: string) => void;
    notNull: (param: any, paramName: string) => void;
    isNull: (param: any, paramName: string) => void;
    notNullOrEmpty: (param: any, paramName: string) => void;
    greaterThanOrEqualToZero: (param: number, paramName: string, shouldBeInteger?: boolean) => void;
    greaterThanZero: (param: number, paramName: string, isInteger?: boolean) => void;
    notZero: (param: number, paramName: string, isInteger?: boolean) => void;
    isInteger: (param: number, paramName: string, strict?: boolean) => void;
    isString: (param: any, paramName: string, strict?: boolean) => void;
    isNumber: (param: any, paramName: string, strict?: boolean) => void;
    isBoolean: (param: any, paramName: string, strict?: boolean) => void;
    isArray: (param: any, paramName: string, strict?: boolean) => void;
    isPlainObject: (param: any, paramName: string, strict?: boolean) => void;
    isBuffer: (param: any, paramName: string, strict?: boolean) => void;
    isBase64: (param: any) => void;
    isValidState: (isValid: boolean, errMsg: string) => void;
    isValidType: (param: any, type: any, strict?: boolean) => void;
    isValidEnumValue: (value: any, enumObject: any, strict?: boolean) => void;
    hasProperties: (object: any, properties: string | string[], paramName: string) => void;
};
export var ConfigUtils: {
    getConfig: ({ configParams, configPath, logger, }?: {
        configParams?: any[];
        configPath: any;
        logger?: import("./lib/logging/Logger");
    }) => {};
    toEnvVarName: (camelCaseStr: string) => string;
};
export var DateTimeUtils: {
    toISO8601DateTime: (date?: Date) => string;
    toRfc1123DateTime: (date?: Date) => string;
    toLogFileDateTime: (date?: Date, utc?: boolean) => string;
    fromISO8601DateTime: (dateTime: string) => Date;
};
export var FileUtils: {
    writeFromBuffer: (imageBuffer: Buffer, filename: string) => Promise<any>;
    readToBuffer: (path: string) => Promise<Buffer>;
};
export var GeneralUtils: {
    urlConcat: (url: string, ...suffixes: string[]) => string;
    stripTrailingSlash: (url: string) => string;
    isAbsoluteUrl: (url: string) => boolean;
    stringify: (...args: any[]) => string;
    stringifySingle: (arg: any) => string;
    toString: (object: any, exclude?: string[]) => string;
    toPlain: (object: any, exclude?: string[], rename?: any) => any;
    mergeDeep: <TFirst, TSecond>(target: TFirst, source: TSecond) => TFirst | TSecond;
    guid: () => string;
    randomAlphanumeric: (length?: number) => string;
    sleep: (ms: number) => Promise<any>;
    toISO8601DateTime: (date?: Date) => string;
    toRfc1123DateTime: (date?: Date) => string;
    toLogFileDateTime: (date?: Date) => string;
    fromISO8601DateTime: (dateTime: string) => Date;
    jwtDecode: (token: string) => any;
    cartesianProduct: (...arrays: any[]) => [][][];
    getPropertyByPath: (object: any, path: string) => any;
    getEnvValue: (propName: string, isBoolean?: boolean) => any;
    backwardCompatible: (...args: any[]) => {};
    cleanStringForJSON: (str: string) => string;
    isFeatureFlagOn: (featureName: any) => boolean;
    isFeatureFlagOff: (featureName: any) => boolean;
    presult: <T>(promise: PromiseLike<T>) => PromiseLike<[any, T]>;
    pexec: (...args: any[]) => import("child_process").PromiseWithChild<{
        stdout: string;
        stderr: string;
    }> & import("child_process").PromiseWithChild<{
        stdout: Buffer;
        stderr: Buffer;
    }> & import("child_process").PromiseWithChild<{
        stdout: string;
        stderr: string;
    }> & import("child_process").PromiseWithChild<{
        stdout: string;
        stderr: string;
    }> & import("child_process").PromiseWithChild<{
        stdout: string | Buffer;
        stderr: string | Buffer;
    }>;
    cachify: (getterFunction: any, cacheRegardlessOfArgs?: boolean) => (...args: any[]) => any;
};
export var ImageUtils: {
    parseImage: (buffer: Buffer) => Promise<(new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image>;
    packImage: (image: (new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image) => Promise<Buffer>;
    createImage: (width: number, height: number) => (new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image;
    scaleImage: (image: (new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image, scaleRatio: number) => Promise<(new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image>;
    resizeImage: (image: (new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image, targetWidth: number, targetHeight: number) => Promise<(new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image>;
    cropImage: (image: (new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image, region: any) => Promise<(new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image>;
    rotateImage: (image: (new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image, degrees: number) => Promise<(new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image>;
    copyPixels: (dstImage: (new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image, dstPosition: {
        x: number;
        y: number;
    }, srcImage: (new (width?: number, height?: number) => HTMLImageElement) | import("png-async").Image, srcPosition: {
        x: number;
        y: number;
    }, size: {
        width: number;
        height: number;
    }) => void;
    getImageSizeFromBuffer: (imageBuffer: Buffer) => {
        width: number;
        height: number;
    };
};
export var PerformanceUtils: {
    start: (name?: string, storeResults?: boolean) => any;
    end: (name: string, deleteResults?: boolean) => {
        name: string;
        time: number;
        summary: string;
    };
    result: (name: string) => {
        name: string;
        time: number;
        summary: string;
    };
    elapsedString: (milliseconds: number) => string;
};
export var StreamUtils: {
    ReadableBufferStream: any;
    WritableBufferStream: any;
};
export var TypeUtils: {
    isNull: (value: any) => boolean;
    isNotNull: (value: any) => boolean;
    isString: (value: any) => boolean;
    isNumber: (value: any) => boolean;
    isInteger: (value: any) => boolean;
    isBoolean: (value: any) => boolean;
    isObject: (value: any) => boolean;
    isPlainObject: (value: any) => boolean;
    isArray: (value: any) => boolean;
    isBuffer: (value: any) => boolean;
    isBase64: (value: any) => boolean;
    isUrl: (value: any) => boolean;
    has: (object: any, keys: string | string[]) => boolean;
    hasMethod: (object: any, methods: string | string[]) => boolean;
    getOrDefault: (value: any, defaultValue: any) => any;
    isFunction: (value: any) => boolean;
    isIterator: (value: any) => boolean;
};
export var deserializeDomSnapshotResult: typeof import("./lib/utils/deserializeDomSnapshotResult");
export var DomCapture: typeof import("./lib/DomCapture");
export var AppOutputProvider: typeof import("./lib/capture/AppOutputProvider");
export var AppOutputWithScreenshot: typeof import("./lib/capture/AppOutputWithScreenshot");
export var EyesScreenshot: typeof import("./lib/capture/EyesScreenshot");
export var EyesScreenshotNew: typeof import("./lib/capture/EyesScreenshotNew");
export var EyesScreenshotFactory: typeof import("./lib/capture/EyesScreenshotFactory");
export var EyesSimpleScreenshot: typeof import("./lib/capture/EyesSimpleScreenshot");
export var EyesSimpleScreenshotFactory: typeof import("./lib/capture/EyesSimpleScreenshotFactory");
export var FullPageCaptureAlgorithm: typeof import("./lib/capture/FullPageCaptureAlgorithm");
export var ImageProvider: typeof import("./lib/capture/ImageProvider");
export var ImageProviderFactory: typeof import("./lib/capture/ImageProviderFactory");
export var CorsIframeHandle: Readonly<{
    BLANK: string;
    KEEP: string;
    SNAPSHOT: string;
}>;
export var CorsIframeHandler: typeof import("./lib/capture/CorsIframeHandler");
export var CutProvider: typeof import("./lib/cropping/CutProvider");
export var FixedCutProvider: typeof import("./lib/cropping/FixedCutProvider");
export var NullCutProvider: typeof import("./lib/cropping/NullCutProvider");
export var UnscaledFixedCutProvider: typeof import("./lib/cropping/UnscaledFixedCutProvider");
export var RemoteSessionEventHandler: typeof import("./lib/events/RemoteSessionEventHandler");
export var SessionEventHandler: typeof import("./lib/events/SessionEventHandler");
export var ValidationInfo: typeof import("./lib/events/ValidationInfo");
export var ValidationResult: typeof import("./lib/events/ValidationResult");
export var CheckSettings: typeof import("./lib/fluent/CheckSettings");
export var DriverCheckSettings: typeof import("./lib/fluent/DriverCheckSettings");
export var GetRegion: typeof import("./lib/fluent/GetRegion");
export var IgnoreRegionByRectangle: typeof import("./lib/fluent/IgnoreRegionByRectangle");
export var IgnoreRegionBySelector: typeof import("./lib/fluent/IgnoreRegionBySelector");
export var IgnoreRegionByElement: typeof import("./lib/fluent/IgnoreRegionByElement");
export var GetFloatingRegion: typeof import("./lib/fluent/GetFloatingRegion");
export var FloatingRegionByRectangle: typeof import("./lib/fluent/FloatingRegionByRectangle");
export var FloatingRegionBySelector: typeof import("./lib/fluent/FloatingRegionBySelector");
export var FloatingRegionByElement: typeof import("./lib/fluent/FloatingRegionByElement");
export var GetAccessibilityRegion: typeof import("./lib/fluent/GetAccessibilityRegion");
export var AccessibilityRegionByRectangle: typeof import("./lib/fluent/AccessibilityRegionByRectangle");
export var AccessibilityRegionBySelector: typeof import("./lib/fluent/AccessibilityRegionBySelector");
export var AccessibilityRegionByElement: typeof import("./lib/fluent/AccessibilityRegionByElement");
export var TargetRegionByElement: typeof import("./lib/fluent/TargetRegionByElement");
export var AppOutput: typeof import("./lib/match/AppOutput");
export var MatchResult: typeof import("./lib/match/MatchResult");
export var MatchSingleWindowData: typeof import("./lib/match/MatchSingleWindowData");
export var MatchWindowData: typeof import("./lib/match/MatchWindowData");
export var ImageMatchOptions: typeof import("./lib/match/ImageMatchOptions");
export var MatchWindowDataWithScreenshot: typeof import("./lib/match/MatchWindowDataWithScreenshot");
export namespace metadata {
    export const ActualAppOutput: typeof import("./lib/metadata/ActualAppOutput");
    export const Annotations: typeof import("./lib/metadata/Annotations");
    const BatchInfo_1: typeof import("./lib/metadata/BatchInfo");
    export { BatchInfo_1 as BatchInfo };
    export const Branch: typeof import("./lib/metadata/Branch");
    export const ExpectedAppOutput: typeof import("./lib/metadata/ExpectedAppOutput");
    const Image_1: typeof import("./lib/metadata/Image");
    export { Image_1 as Image };
    const ImageMatchSettings_1: typeof import("./lib/metadata/ImageMatchSettings");
    export { ImageMatchSettings_1 as ImageMatchSettings };
    export const SessionResults: typeof import("./lib/metadata/SessionResults");
    export const StartInfo: typeof import("./lib/metadata/StartInfo");
}
export var ImageRotation: typeof import("./lib/positioning/ImageRotation");
export var RegionProvider: typeof import("./lib/positioning/RegionProvider");
export var NullRegionProvider: typeof import("./lib/positioning/NullRegionProvider");
export var RegionPositionCompensation: typeof import("./lib/positioning/RegionPositionCompensation");
export var NullRegionPositionCompensation: typeof import("./lib/positioning/NullRegionPositionCompensation");
export var FirefoxRegionPositionCompensation: typeof import("./lib/positioning/FirefoxRegionPositionCompensation");
export var SafariRegionPositionCompensation: typeof import("./lib/positioning/SafariRegionPositionCompensation");
export var RegionPositionCompensationFactory: typeof import("./lib/positioning/RegionPositionCompensationFactory");
export var PositionProvider: typeof import("./lib/positioning/PositionProvider");
export var InvalidPositionProvider: typeof import("./lib/positioning/InvalidPositionProvider");
export var ScrollPositionProvider: typeof import("./lib/positioning/ScrollPositionProvider");
export var CssTranslatePositionProvider: typeof import("./lib/positioning/CssTranslatePositionProvider");
export var ScrollElementPositionProvider: typeof import("./lib/positioning/ScrollElementPositionProvider");
export var CssTranslateElementPositionProvider: typeof import("./lib/positioning/CssTranslateElementPositionProvider");
export var PositionMemento: typeof import("./lib/positioning/PositionMemento");
export var RenderInfo: typeof import("./lib/renderer/RenderInfo");
export var RenderRequest: typeof import("./lib/renderer/RenderRequest");
export var RenderStatus: {
    NEED_MORE_RESOURCES: string;
    RENDERING: string;
    RENDERED: string;
    ERROR: string;
};
export var RenderStatusResults: typeof import("./lib/renderer/RenderStatusResults");
export var RGridDom: typeof import("./lib/renderer/RGridDom");
export var RGridResource: typeof import("./lib/renderer/RGridResource");
export var RunningRender: typeof import("./lib/renderer/RunningRender");
export var EmulationInfo: typeof import("./lib/renderer/EmulationInfo");
export var EmulationDevice: typeof import("./lib/renderer/EmulationDevice");
export var ContextBasedScaleProvider: typeof import("./lib/scaling/ContextBasedScaleProvider");
export var ContextBasedScaleProviderFactory: typeof import("./lib/scaling/ContextBasedScaleProviderFactory");
export var FixedScaleProvider: typeof import("./lib/scaling/FixedScaleProvider");
export var FixedScaleProviderFactory: typeof import("./lib/scaling/FixedScaleProviderFactory");
export var NullScaleProvider: typeof import("./lib/scaling/NullScaleProvider");
export var ScaleProvider: typeof import("./lib/scaling/ScaleProvider");
export var ScaleProviderFactory: typeof import("./lib/scaling/ScaleProviderFactory");
export var ScaleProviderIdentityFactory: typeof import("./lib/scaling/ScaleProviderIdentityFactory");
export var RenderingInfo: typeof import("./lib/server/RenderingInfo");
export var RunningSession: typeof import("./lib/server/RunningSession");
export var ServerConnector: typeof import("./lib/server/ServerConnector");
export var getTunnelAgentFromProxy: typeof import("./lib/server/getTunnelAgentFromProxy");
export var SessionStartInfo: typeof import("./lib/server/SessionStartInfo");
export var MouseTrigger: typeof import("./lib/triggers/MouseTrigger");
export var TextTrigger: typeof import("./lib/triggers/TextTrigger");
export var Trigger: typeof import("./lib/triggers/Trigger");
export var AppEnvironment: typeof import("./lib/AppEnvironment");
export var EyesBase: typeof import("./lib/EyesBase");
export var EyesClassic: typeof import("./lib/EyesClassic");
export var EyesVisualGrid: typeof import("./lib/EyesVisualGrid");
export var EyesFactory: typeof import("./lib/EyesFactory");
export var EyesUtils: {
    getViewportSize: (_logger: import("./lib/logging/Logger"), { executor }: {
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
    }) => import("./lib/geometry/RectangleSize");
    setViewportSize: (logger: import("./lib/logging/Logger"), { controller, executor, context }: {
        controller: import("./lib/wrappers/EyesDriverController")<any, any, any>;
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
        context: import("./lib/wrappers/EyesBrowsingContext")<any, any, any>;
    }, requiredViewportSize: import("./lib/geometry/RectangleSize")) => Promise<any>;
    getTopContextViewportRect: (logger: import("./lib/logging/Logger"), { controller, executor, context }: {
        controller: import("./lib/wrappers/EyesDriverController")<any, any, any>;
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
        context: import("./lib/wrappers/EyesBrowsingContext")<any, any, any>;
    }) => import("./lib/geometry/Region");
    getTopContextViewportSize: (logger: import("./lib/logging/Logger"), { controller, context, executor }: {
        controller: import("./lib/wrappers/EyesDriverController")<any, any, any>;
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
        context: import("./lib/wrappers/EyesBrowsingContext")<any, any, any>;
    }) => import("./lib/geometry/Region");
    getCurrentFrameContentEntireSize: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>) => import("./lib/geometry/Region");
    getElementEntireSize: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<import("./lib/geometry/Region")>;
    getElementClientRect: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<import("./lib/geometry/Region")>;
    getElementRect: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<import("./lib/geometry/Region")>;
    getElementProperties: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, properties: string[], element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => any[];
    getElementCssProperties: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, properties: string[], element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => string[];
    getDevicePixelRatio: (_logger: import("./lib/logging/Logger"), { executor }: {
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
    }) => Promise<number>;
    getMobilePixelRatio: (_logger: import("./lib/logging/Logger"), { controller }: {
        controller: import("./lib/wrappers/EyesDriverController")<any, any, any>;
    }, viewportSize: any) => Promise<number>;
    getInnerOffsets: (_logger: any, executor: any, element: any) => Promise<import("./lib/geometry/Location")>;
    getTopContextScrollLocation: (logger: import("./lib/logging/Logger"), { context, executor }: {
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
        context: import("./lib/wrappers/EyesBrowsingContext")<any, any, any>;
    }) => Promise<Location>;
    getScrollLocation: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<Location>;
    scrollTo: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, location: Location, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<Location>;
    getTransforms: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<any>;
    setTransforms: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, transforms: any, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<any>;
    getTranslateLocation: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<Location>;
    translateTo: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, location: Location, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<Location>;
    isScrollable: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<boolean>;
    markScrollRootElement: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<any>;
    getOverflow: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<string>;
    setOverflow: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, overflow: any, element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<string>;
    blurElement: <TElement>(logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element?: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<TElement>;
    focusElement: (logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<any>;
    getElementXpath: (logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<string>;
    getElementAbsoluteXpath: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, element: import("./lib/wrappers/EyesWrappedElement")<any, any, any>) => Promise<string>;
    locatorToPersistedRegions: <TSelector>(logger: import("./lib/logging/Logger"), { finder, executor }: {
        finder: import("./lib/wrappers/EyesElementFinder")<any, any, any>;
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
    }, selector: TSelector) => Promise<{
        type: string;
        selector: string;
    }[]>;
    ensureRegionVisible: (logger: import("./lib/logging/Logger"), { controller, context, executor }: {
        controller: import("./lib/wrappers/EyesDriverController")<any, any, any>;
        context: import("./lib/wrappers/EyesBrowsingContext")<any, any, any>;
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
    }, positionProvider: import("./lib/positioning/PositionProvider"), region: Promise<import("./lib/geometry/Region")>) => Promise<Location | import("./lib/geometry/Location")>;
    ensureFrameVisible: (_logger: import("./lib/logging/Logger"), context: import("./lib/wrappers/EyesBrowsingContext")<any, any, any>, positionProvider: import("./lib/positioning/PositionProvider"), offset?: Location) => Promise<Location>;
    getCurrentContextInfo: (_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>) => Promise<import("./lib/EyesUtils").ContextInfo<any>>;
    getFrameByNameOrId: <TElement_1>(_logger: import("./lib/logging/Logger"), executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>, nameOrId: string) => TElement_1;
    findFrameByContext: <TElement_2>(_logger: import("./lib/logging/Logger"), { executor, context }: {
        context: import("./lib/wrappers/EyesBrowsingContext")<any, any, any>;
        executor: import("./lib/wrappers/EyesJsExecutor")<any, any, any>;
    }, contextInfo: any, comparator: (left: TElement_2, right: TElement_2) => Promise<boolean>) => Promise<any>;
};
export var FailureReports: Readonly<{
    IMMEDIATE: string;
    ON_CLOSE: string;
}>;
export var MatchSingleWindowTask: typeof import("./lib/MatchSingleWindowTask");
export var MatchWindowTask: typeof import("./lib/MatchWindowTask");
export var TestResults: typeof import("./lib/TestResults");
export var TestResultsError: typeof import("./lib/TestResultsError");
export var AccessibilityStatus: Readonly<{
    Passed: string;
    Failed: string;
}>;
export var TestResultsFormatter: typeof import("./lib/TestResultsFormatter");
export var TestResultsStatus: Readonly<{
    Passed: string;
    Unresolved: string;
    Failed: string;
}>;
export var FrameChain: typeof import("./lib/frames/FrameChain");
export var Frame: typeof import("./lib/frames/Frame");
export var EyesWrappedDriver: typeof import("./lib/wrappers/EyesWrappedDriver");
export var EyesWrappedElement: typeof import("./lib/wrappers/EyesWrappedElement");
export var EyesJsExecutor: typeof import("./lib/wrappers/EyesJsExecutor");
export var EyesElementFinder: typeof import("./lib/wrappers/EyesElementFinder");
export var EyesBrowsingContext: typeof import("./lib/wrappers/EyesBrowsingContext");
export var EyesRunner: typeof import("./lib/runner/EyesRunner");
export var ClassicRunner: typeof import("./lib/runner/ClassicRunner");
export var VisualGridRunner: typeof import("./lib/runner/VisualGridRunner");
export var TestResultContainer: typeof import("./lib/runner/TestResultContainer");
export var TestResultsSummary: typeof import("./lib/runner/TestResultsSummary");
export type PlainConfiguration = {
    showLogs: boolean;
    saveDebugData: boolean;
    appName: string;
    testName: string;
    displayName: string;
    serverUrl: string;
    proxySettings: import("./lib/config/ProxySettings") | import("./lib/config/ProxySettings").PlainProxySettings;
    connectionTimeout: number;
    apiKey: string;
    isDisabled: boolean;
    sessionType: "SEQUENTIAL" | "PROGRESSION";
    removeSession: boolean;
    agentId: string;
    properties: import("./lib/config/PropertyData")[];
    viewportSize: import("./lib/geometry/RectangleSize").PlainRectangleSize | import("./lib/geometry/RectangleSize");
    batch: import("./lib/config/BatchInfo");
    matchTimeout: number;
    defaultMatchSettings: import("./lib/config/ImageMatchSettings");
    baselineEnvName: string;
    environmentName: string;
    baselineName: string;
    parentBranchName: string;
    baselineBranchName: string;
    compareWithParentBranch: boolean;
    saveFailedTests: boolean;
    saveNewTests: boolean;
    ignoreBaseline: boolean;
    saveDiffs: boolean;
    sendDom: boolean;
    hostApp: string;
    hostOS: string;
    hostAppInfo: string;
    hostOSInfo: string;
    deviceInfo: string;
};
export type PlainConfigurationClassic = {
    forceFullPageScreenshot: boolean;
    waitBeforeScreenshots: number;
    stitchMode: "Scroll" | "CSS";
    stitchOverlap: number;
    hideScrollbars: boolean;
    hideCaret: boolean;
};
export type PlainConfigurationVisualGrid = {
    concurrentSessions: number;
    isThrowExceptionOn: boolean;
    browsersInfo: ({
        width: number;
        height: number;
        name: any;
    } | {
        deviceName: any;
        screenOrientation: ScreenOrientation;
    } | {
        chromeEmulationInfo: {
            deviceName: any;
            screenOrientation: ScreenOrientation;
        };
    } | {
        iosDeviceInfo: {
            deviceName: any;
            screenOrientation: ScreenOrientation;
        };
    })[];
    dontCloseBatches: boolean;
};
export type SpecDriver<TDriver, TElement, TSelector> = import("./lib/wrappers/EyesJsExecutor").SpecJsExecutor<TDriver, TElement, TSelector> & import("./lib/wrappers/EyesBrowsingContext").SpecBrowsingContext<TDriver, TElement, TSelector> & import("./lib/wrappers/EyesElementFinder").SpecElementFinder<TDriver, TElement, TSelector> & import("./lib/wrappers/EyesDriverController").SpecDriverController<TDriver, TElement, TSelector>;
export type SpecElement<TDriver, TElement, TSelector> = {
    /**
     * - return true if the value is an element, false otherwise
     */
    isCompatible: (element: any) => boolean;
    /**
     * - return true if the value is a valid selector, false otherwise
     */
    isSelector: (selector: any) => boolean;
    /**
     * - translate cross SDK selector to SDK specific selector
     */
    toSupportedSelector: (selector: import("./lib/wrappers/EyesWrappedElement").EyesSelector) => TSelector;
    /**
     * - translate SDK specific selector to cross SDK selector
     */
    toEyesSelector: (selector: TSelector) => import("./lib/wrappers/EyesWrappedElement").EyesSelector;
    /**
     * - extract id from the unwrapped element
     */
    extractId: (element: import("./lib/wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>) => Promise<string>;
    /**
     * - extract an element from the supported element
     */
    extractElement?: (element: TElement) => TElement;
    /**
     * - extract an element from the supported element
     */
    extractSelector?: (element: TElement) => TSelector;
    /**
     * - check if is a stale element reference result
     */
    isStaleElementReferenceResult?: (result: any) => boolean;
};
export type SpecFrame<TDriver, TElement, TSelector> = {
    /**
     * - return true if the value is a valid selector, false otherwise
     */
    isSelector: (selector: any) => boolean;
    /**
     * - return true if the value is an element, false otherwise
     */
    isCompatibleElement: (element: any) => boolean;
    /**
     * - return wrapped element instance
     */
    createElement: (logger: import("./lib/logging/Logger"), driver: any, element: TElement, selector: TSelector) => import("./lib/wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>;
    /**
     * - return true if elements are equal, false otherwise
     */
    isEqualElements: (leftElement: TElement | import("./lib/wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>, rightElement: TElement | import("./lib/wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>) => Promise<boolean>;
};
export type SpecCheckSettings<TElement, TSelector> = {
    /**
     * - return true if the value is a valid selector, false otherwise
     */
    isSelector: (selector: any) => boolean;
    /**
     * - return true if the value is an element, false otherwise
     */
    isCompatibleElement: (element: any) => boolean;
    /**
     * - return true if the value is a frame reference, false otherwise
     */
    isFrameReference: (reference: any) => boolean;
    /**
     * - return partially created element
     */
    createElementFromSelector: (selector: TSelector) => import("./lib/wrappers/EyesWrappedElement")<any, TElement, TSelector>;
    /**
     * - return partially created element
     */
    createElementFromElement: (element: TElement) => import("./lib/wrappers/EyesWrappedElement")<any, TElement, TSelector>;
    /**
     * - return frame reference
     */
    createFrameReference: (reference: string | number | TElement | TSelector | import("./lib/wrappers/EyesWrappedElement")<any, TElement, TSelector> | import("./lib/frames/Frame")<any, TElement, TSelector>) => import("./lib/frames/Frame")<any, TElement, TSelector>;
};
