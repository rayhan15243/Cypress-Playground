export = EyesScreenshot;
/**
 * Base class for handling screenshots.
 *
 * @abstract
 */
declare class EyesScreenshot {
    /**
     * @param {MutableImage} image
     */
    constructor(image: any);
    _image: any;
    /**
     * @return {MutableImage} - the screenshot image.
     */
    getImage(): any;
    /**
     * Returns a part of the screenshot based on the given region.
     *
     * @abstract
     * @param {Region} region - The region for which we should get the sub screenshot.
     * @param {boolean} throwIfClipped - Throw an EyesException if the region is not fully contained in the screenshot.
     * @return {Promise<EyesScreenshot>} - A screenshot instance containing the given region.
     */
    getSubScreenshot(region: import("../geometry/Region"), throwIfClipped: boolean): Promise<EyesScreenshot>;
    /**
     * Converts a location's coordinates with the {@code from} coordinates type to the {@code to} coordinates type.
     *
     * @abstract
     * @param {Location} location - The location which coordinates needs to be converted.
     * @param {CoordinatesType} from - The current coordinates type for {@code location}.
     * @param {CoordinatesType} to - The target coordinates type for {@code location}.
     * @return {Location} - A new location which is the transformation of {@code location} to the {@code to} type.
     */
    convertLocation(location: Location, from: any, to: any): Location;
    /**
     * Calculates the location in the screenshot of the location given as parameter.
     *
     * @abstract
     * @param {Location} location - The location as coordinates inside the current frame.
     * @param {CoordinatesType} coordinatesType - The coordinates type of {@code location}.
     * @return {Location} - The corresponding location inside the screenshot, in screenshot as-is coordinates type.
     * @throws OutOfBoundsError If the location is not inside the frame's region in the screenshot.
     */
    getLocationInScreenshot(location: Location, coordinatesType: any): Location;
    /**
     * Get the intersection of the given region with the screenshot.
     * @abstract
     * @param {Region} region - The region to intersect.
     * @param {CoordinatesType} coordinatesType - The coordinates type of {@code region}.
     * @return {Region} - The intersected region, in {@code resultCoordinatesType} coordinates.
     */
    getIntersectedRegion(region: import("../geometry/Region"), coordinatesType: any): import("../geometry/Region");
    /**
     * Converts a region's location coordinates with the {@code from} coordinates type to the {@code to} coordinates type.
     *
     * @param {Region} region - The region which location's coordinates needs to be converted.
     * @param {CoordinatesType} from - The current coordinates type for {@code region}.
     * @param {CoordinatesType} to - The target coordinates type for {@code region}.
     * @return {Region} - A new region which is the transformation of {@code region} to the {@code to} coordinates type.
     */
    convertRegionLocation(region: import("../geometry/Region"), from: any, to: any): import("../geometry/Region");
}
