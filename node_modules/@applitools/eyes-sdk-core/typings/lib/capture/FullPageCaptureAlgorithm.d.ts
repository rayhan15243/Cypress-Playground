export = FullPageCaptureAlgorithm;
/**
 * @internal
 */
declare class FullPageCaptureAlgorithm {
    /**
     * @param {Logger} logger
     * @param {RegionPositionCompensation} regionPositionCompensation
     * @param {number} waitBeforeScreenshots
     * @param {DebugScreenshotsProvider} debugScreenshotsProvider
     * @param {EyesScreenshotFactory} screenshotFactory
     * @param {PositionProvider} originProvider
     * @param {ScaleProviderFactory} scaleProviderFactory
     * @param {CutProvider} cutProvider
     * @param {number} stitchingOverlap
     * @param {ImageProvider} imageProvider
     * @param {boolean} isDoubleOverlap
     */
    constructor(logger: any, regionPositionCompensation: any, waitBeforeScreenshots: number, debugScreenshotsProvider: any, screenshotFactory: any, originProvider: any, scaleProviderFactory: any, cutProvider: any, stitchingOverlap: number, imageProvider: any, isDoubleOverlap: boolean);
    _logger: any;
    _waitBeforeScreenshots: number;
    _debugScreenshotsProvider: any;
    _screenshotFactory: any;
    _originProvider: any;
    _scaleProviderFactory: any;
    _cutProvider: any;
    _stitchingOverlap: number;
    _imageProvider: any;
    _isDoubleOverlap: boolean;
    _regionPositionCompensation: any;
    /**
     * @private
     * @param {MutableImage} image
     * @param {Region} region
     * @param {string} name
     * @return {Promise}
     */
    private _saveDebugScreenshotPart;
    /**
     * Returns a stitching of a region.
     *
     * @param {Region} region - The region to stitch. If {@code Region.EMPTY}, the entire image will be stitched.
     * @param {Region} fullArea - The wanted area of the resulting image. If unknown, pass in {@code null} or {@code RectangleSize.EMPTY}.
     * @param {PositionProvider} positionProvider - A provider of the scrolling implementation.
     * @return {Promise<MutableImage>} - An image which represents the stitched region.
     */
    getStitchedRegion(region: import("../geometry/Region"), fullArea: import("../geometry/Region"), positionProvider: any): Promise<import("../images/MutableImage")>;
    /**
     * @param {Region} region
     * @param {MutableImage} image
     * @param {number} pixelRatio
     * @return {Promise<Region>}
     */
    _getRegionInScreenshot(region: import("../geometry/Region"), image: import("../images/MutableImage"), pixelRatio: number): Promise<import("../geometry/Region")>;
}
