export = MatchWindowTask;
/**
 * Handles matching of output with the expected output (including retry and 'ignore mismatch' when needed).
 *
 * @ignore
 */
declare class MatchWindowTask {
    /**
     * @param {Logger} logger - A logger instance.
     * @param {ServerConnector} serverConnector - Our gateway to the agent
     * @param {RunningSession} runningSession - The running session in which we should match the window
     * @param {number} retryTimeout - The default total time to retry matching (ms).
     * @param {EyesBase} eyes - The eyes object.
     * @param {AppOutputProvider} [appOutputProvider] - A callback for getting the application output when performing match.
     */
    constructor(logger: any, serverConnector: any, runningSession: any, retryTimeout: number, eyes: any, appOutputProvider?: any);
    _logger: any;
    _serverConnector: any;
    _runningSession: any;
    _defaultRetryTimeout: number;
    _eyes: any;
    _appOutputProvider: any;
    /** @type {MatchResult} */ _matchResult: any;
    /** @type {EyesScreenshot} */ _lastScreenshot: any;
    /** @type {Region} */ _lastScreenshotBounds: import("./geometry/Region");
    /**
     * Creates the match model and calls the server connector matchWindow method.
     *
     * @param {Trigger[]} userInputs - The user inputs related to the current appOutput.
     * @param {AppOutputWithScreenshot} appOutput - The application output to be matched.
     * @param {string} name - Optional tag to be associated with the match (can be {@code null}).
     * @param {string} renderId - Optional render ID to be associated with the match (can be {@code null}).
     * @param {boolean} ignoreMismatch - Whether to instruct the server to ignore the match attempt in case of a mismatch.
     * @param {ImageMatchSettings} imageMatchSettings - The settings to use.
     * @param {string} source
     * @return {Promise<MatchResult>} - The match result.
     */
    performMatch(userInputs: any[], appOutput: any, name: string, renderId: string, ignoreMismatch: boolean, imageMatchSettings: import("./config/ImageMatchSettings"), source: string): Promise<any>;
    /**
     * @param {GetRegion[]|GetFloatingRegion[]|GetAccessibilityRegion[]} regionProviders
     * @param {EyesScreenshot} screenshot
     * @return {Promise<Region[]|FloatingMatchSettings[]|AccessibilityMatchSettings[]>}
     */
    _getTotalRegions(regionProviders: any[] | any[] | any[], screenshot: any): Promise<import("./geometry/Region")[] | any[] | any[]>;
    /**
     * @param {CheckSettings} checkSettings
     * @param {ImageMatchSettings} imageMatchSettings
     * @param {EyesScreenshot} screenshot
     * @return {Promise}
     */
    _collectRegions(checkSettings: any, imageMatchSettings: import("./config/ImageMatchSettings"), screenshot: any): Promise<any>;
    /**
     * Build match settings by merging the check settings and the default match settings.
     * @param {CheckSettings} checkSettings - the settings to match the image by.
     * @param {EyesScreenshot} screenshot - the Screenshot wrapper object.
     * @return {ImageMatchSettings} - Merged match settings.
     */
    createImageMatchSettings(checkSettings: any, screenshot: any): import("./config/ImageMatchSettings");
    /**
     * Repeatedly obtains an application snapshot and matches it with the next expected output, until a match is found or
     *   the timeout expires.
     *
     * @param {Trigger[]} userInputs - User input preceding this match.
     * @param {Region} region - Window region to capture.
     * @param {string} tag - Optional tag to be associated with the match (can be {@code null}).
     * @param {boolean} shouldRunOnceOnTimeout - Force a single match attempt at the end of the match timeout.
     * @param {boolean} ignoreMismatch - Whether to instruct the server to ignore the match attempt in case of a mismatch.
     * @param {CheckSettings} checkSettings - The internal settings to use.
     * @param {number} [retryTimeout] - The amount of time to retry matching in milliseconds or a negative value to use the
     *   default retry timeout.
     * @param {string} [source]
     * @return {Promise<MatchResult>} - Returns the results of the match
     */
    matchWindow(userInputs: any[], region: import("./geometry/Region"), tag: string, shouldRunOnceOnTimeout: boolean, ignoreMismatch: boolean, checkSettings: any, retryTimeout?: number, source?: string): Promise<any>;
    /**
     * @private
     * @param {Trigger[]} userInputs
     * @param {Region} region
     * @param {string} tag
     * @param {boolean} shouldRunOnceOnTimeout
     * @param {boolean} ignoreMismatch
     * @param {CheckSettings} checkSettings
     * @param {number} retryTimeout
     * @param {string} source
     * @return {Promise<EyesScreenshot>}
     */
    private _takeScreenshot;
    /**
     * @protected
     * @param {Trigger[]} userInputs
     * @param {Region} region
     * @param {string} tag
     * @param {boolean} ignoreMismatch
     * @param {CheckSettings} checkSettings
     * @param {number} retryTimeout
     * @param {string} source
     * @return {Promise<EyesScreenshot>}
     */
    protected _retryTakingScreenshot(userInputs: any[], region: import("./geometry/Region"), tag: string, ignoreMismatch: boolean, checkSettings: any, retryTimeout: number, source: string): Promise<any>;
    /**
     * @protected
     * @param {Trigger[]} userInputs
     * @param {Region} region
     * @param {string} tag
     * @param {boolean} ignoreMismatch
     * @param {CheckSettings} checkSettings
     * @param {number} retryTimeout
     * @param {number} retry
     * @param {number} start
     * @param {EyesScreenshot} [screenshot]
     * @param {string} [source]
     * @return {Promise<EyesScreenshot>}
     */
    protected _takingScreenshotLoop(userInputs: any[], region: import("./geometry/Region"), tag: string, ignoreMismatch: boolean, checkSettings: any, retryTimeout: number, retry: number, start: number, screenshot?: any, source?: string): Promise<any>;
    /**
     * @protected
     * @param {Trigger[]} userInputs
     * @param {Region} region
     * @param {string} tag
     * @param {boolean} ignoreMismatch
     * @param {CheckSettings} checkSettings
     * @param {string} source
     * @return {Promise<EyesScreenshot>}
     */
    protected _tryTakeScreenshot(userInputs: any[], region: import("./geometry/Region"), tag: string, ignoreMismatch: boolean, checkSettings: any, source: string): Promise<any>;
    /**
     * @private
     * @param {EyesScreenshot} screenshot
     */
    private _updateLastScreenshot;
    /**
     * @private
     * @param {Region} region
     */
    private _updateBounds;
    /**
     * @return {EyesScreenshot}
     */
    getLastScreenshot(): any;
    /**
     * @return {Region}
     */
    getLastScreenshotBounds(): import("./geometry/Region");
}
declare namespace MatchWindowTask {
    export { MATCH_INTERVAL };
}
declare const MATCH_INTERVAL: 500;
