export = EyesFactory;
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./EyesClassic')<TDriver, TElement, TSelector>} EyesClassic
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./EyesVisualGrid')<TDriver, TElement, TSelector>} EyesVisualGrid
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {new <TRunner>(serverUrl?: string|boolean|TRunner, isDisabled?: boolean, runner?: TRunner) => TRunner extends VisualGridRunner ? EyesVisualGrid<TDriver, TElement, TSelector> : EyesClassic<TDriver, TElement, TSelector>} EyesFactoryCtor
 */
/**
 * This class represents an abstraction for construction of {@link EyesClassic} and {@link EyesVisualGrid}
 *
 * @template TDriver
 * @template TElement
 * @template TSelector
 */
declare class EyesFactory<TDriver, TElement, TSelector> {
    /**
     * Return a specialized
     * @template TDriver, TElement, TSelector
     * @param {Object} implementations - implementations of related classes
     * @param {new (...args: any[]) => EyesClassic<TDriver, TElement, TSelector>} implementations.EyesClassic - specialized implementation of {@link EyesClassic} class
     * @param {new (...args: any[]) => EyesVisualGrid<TDriver, TElement, TSelector>} implementations.EyesVisualGrid - specialized implementation of {@link EyesVisualGrid} class
     * @return {EyesFactoryCtor<TDriver, TElement, TSelector>} specialized version of {@link EyesFactory}
     */
    static specialize<TDriver_1, TElement_1, TSelector_1>({ EyesClassic, EyesVisualGrid }: {
        EyesClassic: new (...args: any[]) => import("./EyesClassic")<TDriver_1, TElement_1, TSelector_1>;
        EyesVisualGrid: new (...args: any[]) => import("./EyesVisualGrid")<TDriver_1, TElement_1, TSelector_1>;
    }): new <TRunner>(serverUrl?: string | boolean | TRunner, isDisabled?: boolean, runner?: TRunner) => TRunner extends import("./runner/VisualGridRunner") ? import("./EyesVisualGrid")<TDriver_1, TElement_1, TSelector_1> : import("./EyesClassic")<TDriver_1, TElement_1, TSelector_1>;
    /**
     * @param {string} [serverUrl] - The Eyes server URL.
     * @param {boolean} [isDisabled=false] - Set {@code true} to disable Applitools Eyes and use the webdriver directly.
     * @param {Object} [config] - Additional configuration object.
     */
    static fromBrowserInfo(serverUrl?: string, isDisabled?: boolean, config?: any): any;
    /**
     * @param {string|boolean|EyesRunner} [serverUrl=EyesBase.getDefaultServerUrl()] - Eyes server URL
     * @param {boolean} [isDisabled=false] - set to true to disable Applitools Eyes and use the webdriver directly
     * @param {EyesRunner} [runner=new ClassicRunner()] - runner related to the wanted Eyes implementation
     */
    constructor(serverUrl?: string | boolean | import("./runner/EyesRunner"), isDisabled?: boolean, runner?: import("./runner/EyesRunner"));
}
declare namespace EyesFactory {
    export { EyesClassic, EyesVisualGrid, EyesFactoryCtor };
}
type EyesClassic<TDriver, TElement, TSelector> = import("./EyesClassic")<TDriver, TElement, TSelector>;
type EyesVisualGrid<TDriver, TElement, TSelector> = import("./EyesVisualGrid")<TDriver, TElement, TSelector>;
type EyesFactoryCtor<TDriver, TElement, TSelector> = new <TRunner>(serverUrl?: string | boolean | TRunner, isDisabled?: boolean, runner?: TRunner) => TRunner extends import("./runner/VisualGridRunner") ? import("./EyesVisualGrid")<TDriver, TElement, TSelector> : import("./EyesClassic")<TDriver, TElement, TSelector>;
