export = Logger;
/**
 * Write log messages using the provided Log Handler
 */
declare class Logger {
    /**
     * @param {boolean|string} [showLogs] - Determines which log handler will be used. If set to {@code true}, then
     *   `ConsoleLogHandler` will be used, if not set or set to {@code false} then `DebugLogHandler` used.
     * @param {string} [debugAppName] - If using `DebugLogHandler` then this is the debug app name.
     */
    constructor(showLogs?: boolean | string, debugAppName?: string);
    _logHandler: import("./ConsoleLogHandler") | import("./DebugLogHandler");
    _sessionId: string;
    _isIncludeTime: boolean;
    /**
     * @param {string} sessionId
     */
    setSessionId(sessionId: string): void;
    /**
     * @param {boolean} isIncludeTime
     */
    setIncludeTime(isIncludeTime: boolean): void;
    /**
     * @return {LogHandler} - The currently set log handler.
     */
    getLogHandler(): any;
    /**
     * @param {LogHandler} [handler] - The log handler to set. If you want a log handler which does nothing, use
     *   {@link NullLogHandler}.
     */
    setLogHandler(handler?: any): void;
    /**
     * @param {string} name
     * @return {Logger}
     */
    extend(name: string): Logger;
    /**
     * Writes a verbose write message.
     *
     * @param {*} args
     */
    verbose(...args: any): void;
    /**
     * Writes a (non-verbose) write message.
     *
     * @param {*} args
     */
    log(...args: any): void;
    /**
     * @private
     * @return {string} - The name of the method which called the logger, if possible, or an empty string.
     */
    private _getFormattedString;
    /**
     * @private
     * @return {string} - The name of the method which called the logger, if possible, or an empty string.
     */
    private _getMethodName;
}
