export = TestResultsFormatter;
/**
 * A utility class for aggregating and formatting test results.
 */
declare class TestResultsFormatter {
    /**
     * @param {TestResults[]} resultsList
     */
    constructor(resultsList?: any[]);
    _resultsList: any[];
    /**
     * Adds an additional results object to the currently stored results list.
     *
     * @param {TestResults} results - A test results returned by a call to `eyes.close' or 'eyes.abort'.
     * @return {TestResultsFormatter} - The updated 'TestResultsFormatter' instance.
     */
    addTestResults(results: any): TestResultsFormatter;
    /**
     * Adds an additional results object to the currently stored results list.
     *
     * @deprecated use {@link #addTestResults(results)} instead
     * @param {TestResults} results - A test results returned by a call to `eyes.close' or 'eyes.abort'.
     * @return {TestResultsFormatter} - The updated 'TestResultsFormatter' instance.
     */
    addResults(results: any): TestResultsFormatter;
    /**
     * @return {TestResults[]}
     */
    getResultsList(): any[];
    /**
     * @return {void}
     */
    clearResultsList(): void;
    /**
     * Creates a TAP representation of the tests results list in hierarchic format.
     *
     * @param {boolean} [includeSubTests=true] - If true, steps will be treated as "subtests". Default is true.
     * @param {boolean} [markNewAsPassed=false] - If true, new tests will be treated as "passed". Default is false.
     * @return {string} - A string which is the TAP representation of the results list.
     */
    asFormatterString(includeSubTests?: boolean, markNewAsPassed?: boolean): string;
    /**
     * Creates a TAP representation of the tests results list in hierarchic format.
     *
     * @param {boolean} [includeSubTests=true] - If true, steps will be treated as "subtests". Default is true.
     * @param {boolean} [markNewAsPassed=false] - If true, new tests will be treated as "passed". Default is false.
     * @return {string} - A string which is the TAP representation of the results list.
     */
    asHierarchicTAPString(includeSubTests?: boolean, markNewAsPassed?: boolean): string;
    /**
     * Creates a TAP representation of the tests results list in which each steps are colored as success/fail.
     *
     * @param {boolean} [markNewAsPassed=false] - If true, new tests will be treated as "passed". Default is false.
     * @return {string} - A string which is the TAP representation of the results list.
     */
    asFlattenedTAPString(markNewAsPassed?: boolean): string;
    toXmlOutput({ totalTime }?: {
        totalTime: any;
    }): string;
}
