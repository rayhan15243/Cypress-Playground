export = SessionResults;
declare class SessionResults {
    /**
     * @param data
     * @param {string} data.id
     * @param {number} data.revision
     * @param {string} data.runningSessionId
     * @param {boolean} data.isAborted
     * @param {boolean} data.isStarred
     * @param {StartInfo|object} data.startInfo
     * @param {string} data.batchId
     * @param {string} data.secretToken
     * @param {string} data.state
     * @param {string} data.status
     * @param {string} data.isDefaultStatus
     * @param {string} data.startedAt
     * @param {number} data.duration
     * @param {boolean} data.isDifferent
     * @param {AppEnvironment|object} data.env
     * @param {Branch|object} data.branch
     * @param {ExpectedAppOutput[]|object[]} data.expectedAppOutput
     * @param {ActualAppOutput[]|object[]} data.actualAppOutput
     * @param {string} data.baselineId
     * @param {string} data.baselineRevId
     * @param {string} data.scenarioId
     * @param {string} data.scenarioName
     * @param {string} data.appId
     * @param {string} data.baselineModelId
     * @param {string} data.baselineEnvId
     * @param {AppEnvironment|object} data.baselineEnv
     * @param {string} data.appName
     * @param {string} data.baselineBranchName
     * @param {boolean} data.isNew
     */
    constructor({ id, revision, runningSessionId, isAborted, isStarred, startInfo, batchId, secretToken, state, status, isDefaultStatus, startedAt, duration, isDifferent, env, branch, expectedAppOutput, actualAppOutput, baselineId, baselineRevId, scenarioId, scenarioName, appId, baselineModelId, baselineEnvId, baselineEnv, appName, baselineBranchName, isNew, }?: {
        id: any;
        revision: any;
        runningSessionId: any;
        isAborted: any;
        isStarred: any;
        startInfo: any;
        batchId: any;
        secretToken: any;
        state: any;
        status: any;
        isDefaultStatus: any;
        startedAt: any;
        duration: any;
        isDifferent: any;
        env: any;
        branch: any;
        expectedAppOutput: any;
        actualAppOutput: any;
        baselineId: any;
        baselineRevId: any;
        scenarioId: any;
        scenarioName: any;
        appId: any;
        baselineModelId: any;
        baselineEnvId: any;
        baselineEnv: any;
        appName: any;
        baselineBranchName: any;
        isNew: any;
    });
    _id: any;
    _revision: any;
    _runningSessionId: any;
    _isAborted: any;
    _isStarred: any;
    _startInfo: any;
    _batchId: any;
    _secretToken: any;
    _state: any;
    _status: any;
    _isDefaultStatus: any;
    _startedAt: any;
    _duration: any;
    _isDifferent: any;
    _env: any;
    _branch: any;
    _expectedAppOutput: any;
    _actualAppOutput: any;
    _baselineId: any;
    _baselineRevId: any;
    _scenarioId: any;
    _scenarioName: any;
    _appId: any;
    _baselineModelId: any;
    _baselineEnvId: any;
    _baselineEnv: any;
    _appName: any;
    _baselineBranchName: any;
    _isNew: any;
    /**
     * @return {string}
     */
    getId(): string;
    /**
     * @param {string} value
     */
    setId(value: string): void;
    /**
     * @return {number}
     */
    getRevision(): number;
    /**
     * @param {number} value
     */
    setRevision(value: number): void;
    /**
     * @return {string}
     */
    getRunningSessionId(): string;
    /**
     * @param {string} value
     */
    setRunningSessionId(value: string): void;
    /**
     * @return {boolean}
     */
    getIsAborted(): boolean;
    /**
     * @param {boolean} value
     */
    setIsAborted(value: boolean): void;
    /**
     * @return {boolean}
     */
    getIsStarred(): boolean;
    /**
     * @param {boolean} value
     */
    setIsStarred(value: boolean): void;
    /**
     * @return {StartInfo}
     */
    getStartInfo(): import("./StartInfo");
    /**
     * @param {StartInfo} value
     */
    setStartInfo(value: import("./StartInfo")): void;
    /**
     * @return {string}
     */
    getBatchId(): string;
    /**
     * @param {string} value
     */
    setBatchId(value: string): void;
    /**
     * @return {string}
     */
    getSecretToken(): string;
    /**
     * @param {string} value
     */
    setSecretToken(value: string): void;
    /**
     * @return {string}
     */
    getState(): string;
    /**
     * @param {string} value
     */
    setState(value: string): void;
    /**
     * @return {string}
     */
    getStatus(): string;
    /**
     * @param {string} value
     */
    setStatus(value: string): void;
    /**
     * @return {boolean}
     */
    getIsDefaultStatus(): boolean;
    /**
     * @param {boolean} value
     */
    setIsDefaultStatus(value: boolean): void;
    /**
     * @return {string}
     */
    getStartedAt(): string;
    /**
     * @param {string} value
     */
    setStartedAt(value: string): void;
    /**
     * @return {number}
     */
    getDuration(): number;
    /**
     * @param {number} value
     */
    setDuration(value: number): void;
    /**
     * @return {boolean}
     */
    getIsDifferent(): boolean;
    /**
     * @param {boolean} value
     */
    setIsDifferent(value: boolean): void;
    /**
     * @return {AppEnvironment}
     */
    getEnv(): import("../AppEnvironment");
    /**
     * @param {AppEnvironment} value
     */
    setEnv(value: import("../AppEnvironment")): void;
    /**
     * @return {Branch}
     */
    getBranch(): import("./Branch");
    /**
     * @param {Branch} value
     */
    setBranch(value: import("./Branch")): void;
    /**
     * @return {ExpectedAppOutput[]}
     */
    getExpectedAppOutput(): import("./ExpectedAppOutput")[];
    /**
     * @param {ExpectedAppOutput[]} value
     */
    setExpectedAppOutput(value: import("./ExpectedAppOutput")[]): void;
    /**
     * @return {ActualAppOutput[]}
     */
    getActualAppOutput(): import("./ActualAppOutput")[];
    /**
     * @param {ActualAppOutput[]} value
     */
    setActualAppOutput(value: import("./ActualAppOutput")[]): void;
    /**
     * @return {string}
     */
    getBaselineId(): string;
    /**
     * @param {string} value
     */
    setBaselineId(value: string): void;
    /**
     * @return {string}
     */
    getBaselineRevId(): string;
    /**
     * @param {string} value
     */
    setBaselineRevId(value: string): void;
    /**
     * @return {string}
     */
    getScenarioId(): string;
    /**
     * @param {string} value
     */
    setScenarioId(value: string): void;
    /**
     * @return {string}
     */
    getScenarioName(): string;
    /**
     * @param {string} value
     */
    setScenarioName(value: string): void;
    /**
     * @return {string}
     */
    getAppId(): string;
    /**
     * @param {string} value
     */
    setAppId(value: string): void;
    /**
     * @return {string}
     */
    getBaselineModelId(): string;
    /**
     * @param {string} value
     */
    setBaselineModelId(value: string): void;
    /**
     * @return {string}
     */
    getBaselineEnvId(): string;
    /**
     * @param {string} value
     */
    setBaselineEnvId(value: string): void;
    /**
     * @return {AppEnvironment}
     */
    getBaselineEnv(): import("../AppEnvironment");
    /**
     * @param {AppEnvironment} value
     */
    setBaselineEnv(value: import("../AppEnvironment")): void;
    /**
     * @return {string}
     */
    getAppName(): string;
    /**
     * @param {string} value
     */
    setAppName(value: string): void;
    /**
     * @return {string}
     */
    getBaselineBranchName(): string;
    /**
     * @param {string} value
     */
    setBaselineBranchName(value: string): void;
    /**
     * @return {boolean}
     */
    getIsNew(): boolean;
    /**
     * @param {boolean} value
     */
    setIsNew(value: boolean): void;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @override
     */
    toString(): string;
}
