export = StartInfo;
declare class StartInfo {
    /**
     * @param info
     * @param {string} info.sessionType
     * @param {boolean} info.isTransient
     * @param {boolean} info.ignoreBaseline
     * @param {string} info.appIdOrName
     * @param {boolean} info.compareWithParentBranch
     * @param {string} info.scenarioIdOrName
     * @param {string} info.displayName
     * @param {BatchInfo|object} info.batchInfo
     * @param {AppEnvironment|object} info.environment
     * @param {MatchLevel|string} info.matchLevel
     * @param {ImageMatchSettings|object} info.defaultMatchSettings
     * @param {string} info.agentId
     * @param {object[]} info.properties
     * @param {boolean} info.render
     */
    constructor({ sessionType, isTransient, ignoreBaseline, appIdOrName, compareWithParentBranch, scenarioIdOrName, displayName, batchInfo, environment, matchLevel, defaultMatchSettings, agentId, properties, render, }?: {
        sessionType: any;
        isTransient: any;
        ignoreBaseline: any;
        appIdOrName: any;
        compareWithParentBranch: any;
        scenarioIdOrName: any;
        displayName: any;
        batchInfo: any;
        environment: any;
        matchLevel: any;
        defaultMatchSettings: any;
        agentId: any;
        properties: any;
        render: any;
    });
    _sessionType: any;
    _isTransient: any;
    _ignoreBaseline: any;
    _appIdOrName: any;
    _compareWithParentBranch: any;
    _scenarioIdOrName: any;
    _displayName: any;
    _batchInfo: any;
    _environment: any;
    _matchLevel: any;
    _defaultMatchSettings: any;
    _agentId: any;
    _properties: any;
    _render: any;
    /**
     * @return {string}
     */
    getSessionType(): string;
    /**
     * @param {string} value
     */
    setSessionType(value: string): void;
    /**
     * @return {boolean}
     */
    getIsTransient(): boolean;
    /**
     * @param {boolean} value
     */
    setIsTransient(value: boolean): void;
    /**
     * @return {boolean}
     */
    getIgnoreBaseline(): boolean;
    /**
     * @param {boolean} value
     */
    setIgnoreBaseline(value: boolean): void;
    /**
     * @return {string}
     */
    getAppIdOrName(): string;
    /**
     * @param {string} value
     */
    setAppIdOrName(value: string): void;
    /**
     * @return {boolean}
     */
    getCompareWithParentBranch(): boolean;
    /**
     * @param {boolean} value
     */
    setCompareWithParentBranch(value: boolean): void;
    /**
     * @return {string}
     */
    getScenarioIdOrName(): string;
    /**
     * @param {string} value
     */
    setScenarioIdOrName(value: string): void;
    /**
     * @return {string}
     */
    getDisplayName(): string;
    /**
     * @param {string} value
     */
    setDisplayName(value: string): void;
    /**
     * @return {BatchInfo}
     */
    getBatchInfo(): import("./BatchInfo");
    /**
     * @param {BatchInfo} value
     */
    setBatchInfo(value: import("./BatchInfo")): void;
    /**
     * @return {AppEnvironment}
     */
    getEnvironment(): import("../AppEnvironment");
    /**
     * @param {AppEnvironment} value
     */
    setEnvironment(value: import("../AppEnvironment")): void;
    /**
     * @return {string}
     */
    getMatchLevel(): string;
    /**
     * @param {string} value
     */
    setMatchLevel(value: string): void;
    /**
     * @return {ImageMatchSettings}
     */
    getDefaultMatchSettings(): import("./ImageMatchSettings");
    /**
     * @param {ImageMatchSettings} value
     */
    setDefaultMatchSettings(value: import("./ImageMatchSettings")): void;
    /**
     * @return {string}
     */
    getAgentId(): string;
    /**
     * @param {string} value
     */
    setAgentId(value: string): void;
    /**
     * @return {object[]}
     */
    getProperties(): object[];
    /**
     * @param {object[]} value
     */
    setProperties(value: object[]): void;
    /**
     * @return {boolean}
     */
    getRender(): boolean;
    /**
     * @param {boolean} value
     */
    setRender(value: boolean): void;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @override
     */
    toString(): string;
}
