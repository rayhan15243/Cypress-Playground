/// <reference types="node" />
export = ProxySettings;
/**
 * @typedef PlainProxySettings
 * @prop {string} url
 * @prop {string} [username]
 * @prop {string} [password]
 */
/**
 * @typedef ProxyObject
 * @param {string} protocol
 * @param {string} host
 * @param {number} port
 * @param {{username: string, password: string}} auth
 * @param {boolean} isHttpOnly
 */
/**
 * Encapsulates settings for sending Eyes communication via proxy.
 */
declare class ProxySettings {
    /**
     *
     * @param {string|boolean} uri - The proxy's URI or {@code false} to completely disable proxy.
     * @param {string} [username] - The username to be sent to the proxy.
     * @param {string} [password] - The password to be sent to the proxy.
     * @param {boolean} [isHttpOnly] - If the Proxy is an HTTP only and requires https over http tunneling.
     */
    constructor(uri: string | boolean, username?: string, password?: string, isHttpOnly?: boolean);
    _isDisabled: boolean;
    _uri: string | true;
    _username: string;
    _password: string;
    _isHttpOnly: boolean;
    _url: import("url").URL;
    getUri(): string | true;
    getUsername(): string;
    getPassword(): string;
    getIsHttpOnly(): boolean;
    getIsDisabled(): boolean;
    /**
     * @return {{protocol: string, host: string, port: number, auth: {username: string, password: string}, isHttpOnly: boolean}|boolean}
     */
    toProxyObject(): {
        protocol: string;
        host: string;
        port: number;
        auth: {
            username: string;
            password: string;
        };
        isHttpOnly: boolean;
    } | boolean;
}
declare namespace ProxySettings {
    export { PlainProxySettings, ProxyObject };
}
type PlainProxySettings = {
    url: string;
    username?: string;
    password?: string;
};
type ProxyObject = any;
