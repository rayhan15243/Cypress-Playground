export = Configuration;
/**
 * @typedef PlainConfiguration
 * @prop {boolean} showLogs
 * @prop {boolean} saveDebugData
 *
 * @prop {string} appName
 * @prop {string} testName
 * @prop {string} displayName
 *
 * @prop {string} serverUrl
 * @prop {ProxySettings|PlainProxySettings} proxySettings
 * @prop {number} connectionTimeout
 * @prop {string} apiKey
 *
 * @prop {boolean} isDisabled
 * @prop {SessionType} sessionType
 * @prop {boolean} removeSession
 * @prop {string} agentId
 * @prop {PropertyData[]} properties
 * @prop {RectangleSize|PlainRectangleSize} viewportSize
 * @prop {BatchInfo} batch
 * @prop {number} matchTimeout
 * @prop {ImageMatchSettings} defaultMatchSettings
 *
 * @prop {string} baselineEnvName
 * @prop {string} environmentName
 * @prop {string} baselineName
 * @prop {string} parentBranchName
 * @prop {string} baselineBranchName
 * @prop {boolean} compareWithParentBranch
 *
 * @prop {boolean} saveFailedTests
 * @prop {boolean} saveNewTests
 * @prop {boolean} ignoreBaseline
 * @prop {boolean} saveDiffs
 * @prop {boolean} sendDom
 *
 * @prop {string} hostApp
 * @prop {string} hostOS
 * @prop {string} hostAppInfo
 * @prop {string} hostOSInfo
 * @prop {string} deviceInfo
 */
/**
 * @typedef PlainConfigurationClassic
 * @prop {boolean} forceFullPageScreenshot
 * @prop {number} waitBeforeScreenshots
 * @prop {StitchMode} stitchMode
 * @prop {number} stitchOverlap
 * @prop {boolean} hideScrollbars
 * @prop {boolean} hideCaret
 */
/**
 * @typedef PlainConfigurationVisualGrid
 * @prop {number} concurrentSessions
 * @prop {boolean} isThrowExceptionOn
 * @prop {RenderInfo[]} browsersInfo
 * @prop {boolean} dontCloseBatches
 */
declare class Configuration {
    /**
     * @param {Configuration|object} [configuration]
     */
    constructor(configuration?: Configuration | object);
    /** @private @type {boolean} */
    private _showLogs;
    /** @type {boolean} */
    _saveDebugData: boolean;
    /** @type {string} */
    _appName: string;
    /** @type {string} */
    _testName: string;
    /** @type {string} */
    _displayName: string;
    /** @type {boolean} */
    _isDisabled: boolean;
    /** @type {number} */
    _matchTimeout: number;
    /** @type {SessionType} */
    _sessionType: SessionType;
    /** @type {RectangleSize} */
    _viewportSize: RectangleSize;
    /** @type {string} */
    _agentId: string;
    /** @type {string} */
    _apiKey: string;
    /** @type {string} */
    _serverUrl: string;
    /** @type {ProxySettings} */
    _proxySettings: ProxySettings;
    /** @type {number} */
    _connectionTimeout: number;
    /** @type {boolean} */
    _removeSession: boolean;
    /** @type {BatchInfo} */
    _batch: import("./BatchInfo");
    /** @type {PropertyData[]} */
    _properties: import("./PropertyData")[];
    /** @type {string} */
    _baselineEnvName: string;
    /** @type {string} */
    _environmentName: string;
    /** @type {string} */
    _branchName: string;
    /** @type {string} */
    _parentBranchName: string;
    /** @type {string} */
    _baselineBranchName: string;
    /** @type {boolean} */
    _compareWithParentBranch: boolean;
    /** @type {boolean} */
    _saveFailedTests: boolean;
    /** @type {boolean} */
    _saveNewTests: boolean;
    /** @type {boolean} */
    _ignoreBaseline: boolean;
    /** @type {boolean} */
    _saveDiffs: boolean;
    /** @type {boolean} */
    _sendDom: boolean;
    /** @type {string} */
    _hostApp: string;
    /** @type {string} */
    _hostOS: string;
    /** @type {string} */
    _hostAppInfo: string;
    /** @type {string} */
    _hostOSInfo: string;
    /** @type {string} */
    _deviceInfo: string;
    /** @type {ImageMatchSettings} */
    _defaultMatchSettings: ImageMatchSettings;
    /** @type {boolean} */
    _forceFullPageScreenshot: boolean;
    /** @type {number} */
    _waitBeforeScreenshots: number;
    /** @type {StitchMode} */
    _stitchMode: StitchMode;
    /** @type {boolean} */
    _hideScrollbars: boolean;
    /** @type {boolean} */
    _hideCaret: boolean;
    /** @type {number} */
    _stitchOverlap: number;
    /** @type {number} */
    _concurrentSessions: number;
    /** @type {boolean} */
    _isThrowExceptionOn: boolean;
    /** @type {RenderInfo[]} */
    _browsersInfo: RenderInfo[];
    /** @type {boolean} */
    _dontCloseBatches: boolean;
    /**
     * @return {boolean}
     */
    getShowLogs(): boolean;
    /**
     * @param {boolean} value
     * @return {this}
     */
    setShowLogs(value: boolean): this;
    /**
     * @return {boolean}
     */
    getSaveDebugData(): boolean;
    /**
     * @param {boolean} value
     * @return {this}
     */
    setSaveDebugData(value: boolean): this;
    /**
     * @return {string} - The currently set API key or {@code null} if no key is set.
     */
    getApiKey(): string;
    /**
     * Sets the API key of your applitools Eyes account.
     *
     * @param {string} value - The api key to be used.
     * @return {this}
     */
    setApiKey(value: string): this;
    /**
     * @return {string} - The URI of the eyes server.
     */
    getServerUrl(): string;
    /**
     * Sets the current server URL used by the rest client.
     *
     * @param {string} value - The URI of the rest server, or {@code null} to use the default server.
     * @return {this}
     */
    setServerUrl(value: string): this;
    /**
     * @return {ProxySettings} - The current proxy settings, or {@code undefined} if no proxy is set.
     */
    getProxy(): ProxySettings;
    /**
     * Sets the proxy settings to be used by the rest client.
     *
     * @param {ProxySettings|PlainProxySettings|string|boolean} value - The ProxySettings object or proxy url to be used.
     *   Use {@code false} to disable proxy (even if it set via env variables). Use {@code null} to reset proxy settings.
     * @return {this}
     */
    setProxy(value: ProxySettings | PlainProxySettings | string | boolean): this;
    /**
     * @return {number} - The timeout for web requests (in milliseconds).
     */
    getConnectionTimeout(): number;
    /**
     * Sets the connect and read timeouts for web requests.
     *
     * @param {number} value - Connect/Read timeout in milliseconds. 0 equals infinity.
     * @return {this}
     */
    setConnectionTimeout(value: number): this;
    /**
     * @return {boolean} - Whether sessions are removed immediately after they are finished.
     */
    getRemoveSession(): boolean;
    /**
     * Whether sessions are removed immediately after they are finished.
     *
     * @param {boolean} value
     * @return {this}
     */
    setRemoveSession(value: boolean): this;
    /**
     * @return {boolean} - The currently compareWithParentBranch value
     */
    getCompareWithParentBranch(): boolean;
    /**
     * @param {boolean} value - New compareWithParentBranch value, default is false
     * @return {this}
     */
    setCompareWithParentBranch(value: boolean): this;
    /**
     * @return {boolean} - The currently ignoreBaseline value
     */
    getIgnoreBaseline(): boolean;
    /**
     * @param {boolean} value - New ignoreBaseline value, default is false
     * @return {this}
     */
    setIgnoreBaseline(value: boolean): this;
    /**
     * @return {boolean} - True if new tests are saved by default.
     */
    getSaveNewTests(): boolean;
    /**
     * Used for automatic save of a test run. New tests are automatically saved by default.
     *
     * @param {boolean} value - True if new tests should be saved by default. False otherwise.
     * @return {this}
     */
    setSaveNewTests(value: boolean): this;
    /**
     * @return {boolean} - True if failed tests are saved by default.
     */
    getSaveFailedTests(): boolean;
    /**
     * Set whether or not failed tests are saved by default.
     *
     * @param {boolean} value - True if failed tests should be saved by default, false otherwise.
     * @return {this}
     */
    setSaveFailedTests(value: boolean): this;
    /**
     * @return {number} - The maximum time in ms {@link #checkWindowBase(RegionProvider, string, boolean, number)} waits
     *   for a match.
     */
    getMatchTimeout(): number;
    /**
     * Sets the maximum time (in ms) a match operation tries to perform a match.
     * @param {number} value - Total number of ms to wait for a match.
     * @return {this}
     */
    setMatchTimeout(value: number): this;
    /**
     * @return {boolean} - Whether eyes is disabled.
     */
    getIsDisabled(): boolean;
    /**
     * @param {boolean} value - If true, all interactions with this API will be silently ignored.
     * @return {this}
     */
    setIsDisabled(value: boolean): this;
    /**
     * @return {BatchInfo}
     */
    getBatch(): import("./BatchInfo");
    /**
     * Sets the batch in which context future tests will run or {@code null} if tests are to run standalone.
     *
     * @param {BatchInfo|BatchInfoObject} value
     * @return {this}
     */
    setBatch(value: import("./BatchInfo") | any): this;
    /**
     * @return {PropertyData[]}
     */
    getProperties(): import("./PropertyData")[];
    /**
     * @signature `setProperties(properties)`
     * @sigparam {PropertyData[]} properties - A list of PropertyData instances
     *
     * @signature `setProperties(propertiesObj)`
     * @sigparam {PropertyDataObject[]} propertiesObj - A list of property data objects
     *
     * @param {PropertyData[]|PropertyDataObject[]} value
     * @return {this}
     */
    setProperties(value: import("./PropertyData")[] | any[]): this;
    /**
     * Adds a property to be sent to the server.
     *
     * @signature `addProperty(property)`
     * @sigparam {PropertyData|PropertyDataObject} property - The name and value are taken from the object passed
     *
     * @signature`addProperty(propertyName, propertyValue)`
     * @sigparam {string} propertyName - The name of the property
     * @sigparam {string} propertyValue - The value of the property
     *
     * @param {PropertyData|string} propertyOrName - The property name or PropertyData object.
     * @param {string} [propertyValue] - The property value.
     * @return {this}
     */
    addProperty(propertyOrName: import("./PropertyData") | string, propertyValue?: string): this;
    /**
     * @return {string}
     */
    getBranchName(): string;
    /**
     * @param {string} value
     * @return {this}
     */
    setBranchName(value: string): this;
    /**
     * @return {string}
     */
    getAgentId(): string;
    /**
     * @param {string} value
     * @return {this}
     */
    setAgentId(value: string): this;
    /**
     * @return {string}
     */
    getParentBranchName(): string;
    /**
     * @param {string} value
     * @return {this}
     */
    setParentBranchName(value: string): this;
    /**
     * @return {string}
     */
    getBaselineBranchName(): string;
    /**
     * @param {string} value
     * @return {this}
     */
    setBaselineBranchName(value: string): this;
    /**
     * @return {string}
     */
    getBaselineEnvName(): string;
    /**
     * @param {string} value
     * @return {this}
     */
    setBaselineEnvName(value: string): this;
    /**
     * @return {string}
     */
    getEnvironmentName(): string;
    /**
     * @param {string} value
     * @return {this}
     */
    setEnvironmentName(value: string): this;
    /**
     * @return {boolean}
     */
    getSaveDiffs(): boolean;
    /**
     * @param {boolean} value
     * @return {this}
     */
    setSaveDiffs(value: boolean): this;
    /**
     * @return {boolean}
     */
    getSendDom(): boolean;
    /**
     * @param {boolean} value
     * @return {this}
     */
    setSendDom(value: boolean): this;
    /**
     * @return {string} - The host OS as set by the user.
     */
    getHostApp(): string;
    /**
     * Sets the host application - overrides the one in the agent string.
     *
     * @param {string} value - The application running the AUT (e.g., Chrome).
     */
    setHostApp(value: string): this;
    /**
     * @return {string} - The host OS as set by the user.
     */
    getHostOS(): string;
    /**
     * Sets the host OS name - overrides the one in the agent string.
     *
     * @param {string} value - The host OS running the AUT.
     */
    setHostOS(value: string): this;
    /**
     * @return {string} - The host OS as set by the user.
     */
    getHostAppInfo(): string;
    /**
     * Sets the host application - overrides the one in the agent string.
     *
     * @param {string} value - The application running the AUT (e.g., Chrome).
     */
    setHostAppInfo(value: string): this;
    /**
     * @return {string} - The host OS as set by the user.
     */
    getHostOSInfo(): string;
    /**
     * Sets the host OS name - overrides the one in the agent string.
     *
     * @param {string} value - The host OS running the AUT.
     */
    setHostOSInfo(value: string): this;
    /**
     * @return {string} - The application name running the AUT.
     */
    getDeviceInfo(): string;
    /**
     * Sets the host application - overrides the one in the agent string.
     *
     * @param {string} value - The application running the AUT (e.g., Chrome).
     * @return {this}
     */
    setDeviceInfo(value: string): this;
    /**
     * @return {string}
     */
    getAppName(): string;
    /**
     * The default app name if no current name was provided. If this is {@code null} then there is no default appName.
     *
     * @param {string} value
     * @return {this}
     */
    setAppName(value: string): this;
    /**
     * @return {string}
     */
    getTestName(): string;
    /**
     * @param {string} value
     * @return {this}
     */
    setTestName(value: string): this;
    /**
     * @return {string} - The display name of the currently running test.
     */
    getDisplayName(): string;
    /**
     * @param {string} value - The display name of the currently running test.
     * @return {this}
     */
    setDisplayName(value: string): this;
    /**
     * @return {RectangleSize}
     */
    getViewportSize(): RectangleSize;
    /**
     * @param {RectangleSize|PlainRectangleSize} value
     * @return {this}
     */
    setViewportSize(value: RectangleSize | PlainRectangleSize): this;
    /**
     * @return {SessionType}
     */
    getSessionType(): SessionType;
    /**
     * @param {SessionType} value
     * @return {this}
     */
    setSessionType(value: SessionType): this;
    /**
     * @return {ImageMatchSettings} - The match settings used for the session.
     */
    getDefaultMatchSettings(): ImageMatchSettings;
    /**
     * Updates the match settings to be used for the session.
     *
     * @param {ImageMatchSettings|object} value - The match settings to be used for the session.
     * @return {this}
     */
    setDefaultMatchSettings(value: ImageMatchSettings | object): this;
    /**
     * @return {MatchLevel} - The test-wide match level.
     */
    getMatchLevel(): any;
    /**
     * The test-wide match level to use when checking application screenshot with the expected output.
     *
     * @param {MatchLevel} value - The test-wide match level to use when checking application screenshot with the
     *   expected output.
     * @return {this}
     */
    setMatchLevel(value: any): this;
    /**
     * @return {AccessibilitySettings} - The test-wide accessibility settings.
     */
    getAccessibilityValidation(): AccessibilitySettings;
    /**
     * The test-wide accessibility settings to use when checking application screenshot.
     *
     * @param {AccessibilitySettings} value - The test-wide accessibility settings to use when checking application screenshot.
     * @return {this}
     */
    setAccessibilityValidation(value: AccessibilitySettings): this;
    /**
     * @return {boolean} - The test-wide useDom to use in match requests.
     */
    getUseDom(): boolean;
    /**
     * The test-wide useDom to use.
     *
     * @param {boolean} value - The test-wide useDom to use in match requests.
     * @return {this}
     */
    setUseDom(value: boolean): this;
    /**
     * @return {boolean} - The test-wide enablePatterns to use in match requests.
     */
    getEnablePatterns(): boolean;
    /**
     * The test-wide enablePatterns to use.
     *
     * @param {boolean} value - The test-wide enablePatterns to use in match requests.
     * @return {this}
     */
    setEnablePatterns(value: boolean): this;
    /**
     * @return {boolean} - The test-wide ignoreDisplacements to use in match requests.
     */
    getIgnoreDisplacements(): boolean;
    /**
     * The test-wide ignoreDisplacements to use.
     *
     * @param {boolean} value - The test-wide ignoreDisplacements to use in match requests.
     * @return {this}
     */
    setIgnoreDisplacements(value: boolean): this;
    /**
     * @return {boolean} - Whether to ignore or the blinking caret or not when comparing images.
     */
    getIgnoreCaret(): boolean;
    /**
     * Sets the ignore blinking caret value.
     *
     * @param {boolean} value - The ignore value.
     * @return {this}
     */
    setIgnoreCaret(value: boolean): this;
    /**
     * @return {boolean} - Whether Eyes should force a full page screenshot.
     */
    getForceFullPageScreenshot(): boolean;
    /**
     * Forces a full page screenshot (by scrolling and stitching) if the browser only supports viewport screenshots).
     *
     * @param {boolean} value - Whether to force a full page screenshot or not.
     * @return {this}
     */
    setForceFullPageScreenshot(value: boolean): this;
    /**
     * @return {number} - The time to wait just before taking a screenshot.
     */
    getWaitBeforeScreenshots(): number;
    /**
     * Sets the time to wait just before taking a screenshot (e.g., to allow positioning to stabilize when performing a
     * full page stitching).
     *
     * @param {number} value - The time to wait (Milliseconds). Values smaller or equal to 0, will cause the
     *   default value to be used.
     * @return {this}
     */
    setWaitBeforeScreenshots(value: number): this;
    /**
     * @return {StitchMode} - The current stitch mode settings.
     */
    getStitchMode(): StitchMode;
    /**
     * Set the type of stitching used for full page screenshots. When the page includes fixed position header/sidebar,
     * use {@link StitchMode#CSS}. Default is {@link StitchMode#SCROLL}.
     *
     * @param {StitchMode} value - The stitch mode to set.
     * @return {this}
     */
    setStitchMode(value: StitchMode): this;
    /**
     * @return {boolean} - Whether or not scrollbars are hidden when taking screenshots.
     */
    getHideScrollbars(): boolean;
    /**
     * Hide the scrollbars when taking screenshots.
     *
     * @param {boolean} value - Whether to hide the scrollbars or not.
     * @return {this}
     */
    setHideScrollbars(value: boolean): this;
    /**
     * @return {boolean}
     */
    getHideCaret(): boolean;
    /**
     * @param {boolean} value
     * @return {this}
     */
    setHideCaret(value: boolean): this;
    /**
     * @return {number} - Returns the stitching overlap in pixels.
     */
    getStitchOverlap(): number;
    /**
     * Sets the stitch overlap in pixels.
     *
     * @param {number} value - The width (in pixels) of the overlap.
     * @return {this}
     */
    setStitchOverlap(value: number): this;
    /**
     * @return {boolean}
     */
    getDontCloseBatches(): boolean;
    /**
     * @param {boolean} value
     * @return {this}
     */
    setDontCloseBatches(value: boolean): this;
    /**
     * @return {number}
     */
    getConcurrentSessions(): number;
    /**
     * @param {number} value
     * @return {this}
     */
    setConcurrentSessions(value: number): this;
    /**
     * @return {boolean}
     */
    getIsThrowExceptionOn(): boolean;
    /**
     * @param {boolean} value
     * @return {this}
     */
    setIsThrowExceptionOn(value: boolean): this;
    /**
     * @return {RenderInfo[]|undefined}
     */
    getBrowsersInfo(): RenderInfo[] | undefined;
    /**
     * @param {RenderInfo[]} value
     * @return {this}
     */
    setBrowsersInfo(value: RenderInfo[]): this;
    /**
     * @param {...RenderInfo} browsersInfo
     * @return {this}
     */
    addBrowsers(...browsersInfo: RenderInfo[]): this;
    /**
     * @param {number|RenderInfo} widthOrBrowserInfo
     * @param {number} [height]
     * @param {BrowserType} [browserType]
     * @return {this}
     */
    addBrowser(widthOrBrowserInfo: number | RenderInfo, height?: number, browserType?: any, ...args: any[]): this;
    /**
     * @param {DeviceName} deviceName
     * @param {ScreenOrientation} [screenOrientation=ScreenOrientation.PORTRAIT]
     * @return {this}
     */
    addDeviceEmulation(deviceName: any, screenOrientation?: ScreenOrientation): this;
    /**
     * @param {Configuration|object} other
     */
    mergeConfig(other: Configuration | object): void;
    /**
     * @return {object}
     */
    toOpenEyesConfiguration(): object;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @return {Configuration}
     */
    cloneConfig(): Configuration;
}
declare namespace Configuration {
    export { AccessibilityLevel, AccessibilityGuidelinesVersion, StitchMode, SessionType, ProxySettings, PlainProxySettings, ImageMatchSettings, RectangleSize, PlainRectangleSize, AccessibilitySettings, DesktopBrowserInfo, EmulationInfo, ChromeEmulationInfo, IosDeviceInfo, RenderInfo, PlainConfiguration, PlainConfigurationClassic, PlainConfigurationVisualGrid };
}
type SessionType = "SEQUENTIAL" | "PROGRESSION";
declare const RectangleSize: typeof import("../geometry/RectangleSize");
declare const ProxySettings: typeof import("./ProxySettings");
declare const ImageMatchSettings: typeof import("./ImageMatchSettings");
type StitchMode = "Scroll" | "CSS";
type RenderInfo = {
    width: number;
    height: number;
    name: (any | undefined);
} | {
    deviceName: any;
    screenOrientation: (ScreenOrientation | undefined);
} | {
    chromeEmulationInfo: EmulationInfo;
} | {
    iosDeviceInfo: {
        deviceName: any;
        screenOrientation: (ScreenOrientation | undefined);
    };
};
type PlainProxySettings = {
    url: string;
    username?: string;
    password?: string;
};
type PlainRectangleSize = {
    width: number;
    height: number;
};
type AccessibilitySettings = {
    level: AccessibilityLevel;
    guidelinesVersion: AccessibilityGuidelinesVersion;
};
declare const ScreenOrientation: Readonly<{
    PORTRAIT: string;
    LANDSCAPE: string;
}>;
type AccessibilityLevel = string;
type AccessibilityGuidelinesVersion = string;
type ProxySettings = import("./ProxySettings");
type ImageMatchSettings = import("./ImageMatchSettings");
type RectangleSize = import("../geometry/RectangleSize");
type DesktopBrowserInfo = {
    width: number;
    height: number;
    name: (any | undefined);
};
type EmulationInfo = {
    deviceName: any;
    screenOrientation: (ScreenOrientation | undefined);
};
type ChromeEmulationInfo = {
    chromeEmulationInfo: EmulationInfo;
};
type IosDeviceInfo = {
    iosDeviceInfo: {
        deviceName: any;
        screenOrientation: (ScreenOrientation | undefined);
    };
};
type PlainConfiguration = {
    showLogs: boolean;
    saveDebugData: boolean;
    appName: string;
    testName: string;
    displayName: string;
    serverUrl: string;
    proxySettings: ProxySettings | PlainProxySettings;
    connectionTimeout: number;
    apiKey: string;
    isDisabled: boolean;
    sessionType: SessionType;
    removeSession: boolean;
    agentId: string;
    properties: import("./PropertyData")[];
    viewportSize: RectangleSize | PlainRectangleSize;
    batch: import("./BatchInfo");
    matchTimeout: number;
    defaultMatchSettings: ImageMatchSettings;
    baselineEnvName: string;
    environmentName: string;
    baselineName: string;
    parentBranchName: string;
    baselineBranchName: string;
    compareWithParentBranch: boolean;
    saveFailedTests: boolean;
    saveNewTests: boolean;
    ignoreBaseline: boolean;
    saveDiffs: boolean;
    sendDom: boolean;
    hostApp: string;
    hostOS: string;
    hostAppInfo: string;
    hostOSInfo: string;
    deviceInfo: string;
};
type PlainConfigurationClassic = {
    forceFullPageScreenshot: boolean;
    waitBeforeScreenshots: number;
    stitchMode: StitchMode;
    stitchOverlap: number;
    hideScrollbars: boolean;
    hideCaret: boolean;
};
type PlainConfigurationVisualGrid = {
    concurrentSessions: number;
    isThrowExceptionOn: boolean;
    browsersInfo: RenderInfo[];
    dontCloseBatches: boolean;
};
