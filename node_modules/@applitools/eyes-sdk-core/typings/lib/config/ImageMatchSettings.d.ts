export = ImageMatchSettings;
/**
 * Encapsulates match settings for the a session.
 */
declare class ImageMatchSettings {
    /**
     * @param {MatchLevel} [matchLevel=MatchLevel.Strict] The "strictness" level to use.
     * @param {ExactMatchSettings} [exact] - Additional threshold parameters when the {@code Exact} match level is used.
     * @param {boolean} [ignoreCaret]
     * @param {boolean} [useDom]
     * @param {boolean} [enablePatterns]
     * @param {boolean} [ignoreDisplacements]
     * @param {Region[]} [ignore]
     * @param {Region[]} [layout]
     * @param {Region[]} [strict]
     * @param {Region[]} [content]
     * @param {AccessibilityMatchSettings[]} [accessibility]
     * @param {FloatingMatchSettings[]} [floating]
     * @param {AccessibilitySettings} [accessibilitySettings]
     */
    constructor(imageMatchSettings: any, ...args: any[]);
    _matchLevel: any;
    _ignoreCaret: any;
    _useDom: any;
    _enablePatterns: any;
    _ignoreDisplacements: any;
    _exact: any;
    /** @type {Region[]} */
    _ignoreRegions: any[];
    /** @type {Region[]} */
    _layoutRegions: any[];
    /** @type {Region[]} */
    _strictRegions: any[];
    /** @type {Region[]} */
    _contentRegions: any[];
    /** @type {AccessibilityMatchSettings[]} */
    _accessibilityMatchSettings: any[];
    /** @type {FloatingMatchSettings[]} */
    _floatingMatchSettings: any[];
    /**
     * @return {MatchLevel} - The match level to use.
     */
    getMatchLevel(): any;
    /**
     * @param {MatchLevel} value - The match level to use.
     */
    setMatchLevel(value: any): void;
    /**
     * @return {AccessibilitySettings} - The accessibility settings to use.
     */
    getAccessibilitySettings(): any;
    /**
     * @param {AccessibilitySettings} value - The accessibility settings to use.
     */
    setAccessibilitySettings(value: any): void;
    _accessibilitySettings: any;
    /**
     * @return {ExactMatchSettings} - The additional threshold params when the {@code Exact} match level is used, if any.
     */
    getExact(): import("./ExactMatchSettings");
    /**
     * @param {ExactMatchSettings} value - The additional threshold parameters when the {@code Exact} match level is used.
     */
    setExact(value: import("./ExactMatchSettings")): void;
    /**
     * @return {boolean} - The parameters for the "IgnoreCaret" match settings.
     */
    getIgnoreCaret(): boolean;
    /**
     * @param {boolean} value - The parameters for the "ignoreCaret" match settings.
     */
    setIgnoreCaret(value: boolean): void;
    /**
     * @return {boolean}
     */
    getUseDom(): boolean;
    /**
     * @param {boolean} value
     */
    setUseDom(value: boolean): void;
    /**
     * @return {boolean}
     */
    getEnablePatterns(): boolean;
    /**
     * @param {boolean} value
     */
    setEnablePatterns(value: boolean): void;
    /**
     * @return {boolean}
     */
    getIgnoreDisplacements(): boolean;
    /**
     * @param {boolean} value
     */
    setIgnoreDisplacements(value: boolean): void;
    /**
     * Returns the array of regions to ignore.
     * @return {Region[]} - the array of regions to ignore.
     */
    getIgnoreRegions(): any[];
    /**
     * Sets an array of regions to ignore.
     * @param {Region[]} ignoreRegions - The array of regions to ignore.
     */
    setIgnoreRegions(ignoreRegions: any[]): void;
    /**
     * Sets an array of regions to check using the Layout method.
     * @param {Region[]} layoutRegions - The array of regions to ignore.
     */
    setLayoutRegions(layoutRegions: any[]): void;
    /**
     * Returns the array of regions to check using the Layout method.
     * @return {Region[]} - the array of regions to ignore.
     */
    getLayoutRegions(): any[];
    /**
     * Returns the array of regions to check using the Strict method.
     * @return {Region[]} - the array of regions to ignore.
     */
    getStrictRegions(): any[];
    /**
     * Sets an array of regions to check using the Strict method.
     * @param {Region[]} strictRegions - The array of regions to ignore.
     */
    setStrictRegions(strictRegions: any[]): void;
    /**
     * Returns the array of regions to check using the Content method.
     * @return {Region[]} - the array of regions to ignore.
     */
    getContentRegions(): any[];
    /**
     * Sets an array of regions to check using the Content method.
     * @param {Region[]} contentRegions - The array of regions to ignore.
     */
    setContentRegions(contentRegions: any[]): void;
    /**
     * Returns an array of floating regions.
     * @return {FloatingMatchSettings[]} - an array of floating regions.
     */
    getFloatingRegions(): any[];
    /**
     * Sets an array of accessibility regions.
     * @param {AccessibilityMatchSettings[]} accessibilityMatchSettings - The array of accessibility regions.
     */
    setAccessibilityRegions(accessibilityMatchSettings: any[]): void;
    /**
     * Returns an array of accessibility regions.
     * @return {AccessibilityMatchSettings[]} - an array of accessibility regions.
     */
    getAccessibilityRegions(): any[];
    /**
     * Sets an array of floating regions.
     * @param {FloatingMatchSettings[]} floatingMatchSettings - The array of floating regions.
     */
    setFloatingRegions(floatingMatchSettings: any[]): void;
    /**
     * @override
     */
    toJSON(): any;
    _toPlain(): any;
    /**
     * @override
     */
    toString(): string;
}
