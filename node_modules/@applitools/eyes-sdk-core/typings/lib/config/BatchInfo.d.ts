export = BatchInfo;
/**
 * @typedef BatchInfoObject
 * @prop {string} [id]
 * @prop {string} [name]
 * @prop {Data|string} [startedAt]
 * @prop {string} [sequenceName]
 * @prop {boolean} [notifyOnCompletion]
 */
/**
 * A batch of tests.
 */
declare class BatchInfo {
    /**
     * Creates a new BatchInfo instance.
     * Alternatively, batch can be set via global variables `APPLITOOLS_BATCH_ID`, `APPLITOOLS_BATCH_NAME`, `APPLITOOLS_BATCH_SEQUENCE`.
     *
     * @signature `new BatchInfo()`
     *
     * @signature `new BatchInfo(batchInfo)`
     * @sigparam {BatchInfo} batchInfo - The BatchInfo instance to clone from.
     *
     * @signature `new BatchInfo(object)`
     * @sigparam {{id: (string|undefined), name: (string|undefined), startedAt: (Date|string|undefined), sequenceName: (string|undefined)}} object - The batch object to clone from.
     *
     * @signature `new BatchInfo(name, startedAt, id)`
     * @sigparam {string} name - Name of batch or {@code null} if anonymous.
     * @sigparam {Date|string} [startedAt] - Batch start time, defaults to the current time.
     * @sigparam {string} [id] - The ID of the existing batch, used to clone batch.
     *
     * @param {BatchInfo|BatchInfoObject|string} [varArg1] - The BatchInfo (or object) to clone from or the name of new batch.
     *   If no arguments given, new BatchInfo will be created with default or environment settings.
     * @param {string} [varArg2] - Batch start time, defaults to the current time.
     * @param {string} [varArg3] - ID of the batch, defaults is generated using GeneralUtils.guid().
     */
    constructor(varArg1?: BatchInfo | BatchInfoObject | string, varArg2?: string, varArg3?: string);
    _id: any;
    _isGeneratedId: boolean;
    _name: any;
    _startedAt: any;
    _sequenceName: any;
    _notifyOnCompletion: any;
    _isCompleted: any;
    /**
     * @return {string} - The id of the current batch.
     */
    getId(): string;
    getIsGeneratedId(): boolean;
    setIsGeneratedId(value: any): any;
    /**
     * Sets a unique identifier for the batch. Sessions with batch info which includes the same ID will be grouped
     * together.
     *
     * @param {string} value - The batch's ID
     * @return {this}
     */
    setId(value: string): this;
    /**
     * @return {string} - The name of the batch or {@code null} if anonymous.
     */
    getName(): string;
    /**
     * @param {string} name - The name of the batch to use.
     * @return {this}
     */
    setName(name: string): this;
    /**
     * @return {Date} - The batch start date
     */
    getStartedAt(): Date;
    /**
     * @param {string} startedAt
     * @return {this}
     */
    setStartedAt(startedAt: string): this;
    /**
     * @return {string} - The name of the sequence.
     */
    getSequenceName(): string;
    /**
     * @param {string} sequenceName - The Batch's sequence name.
     * @return {this}
     */
    setSequenceName(sequenceName: string): this;
    /**
     * @return {boolean} - Indicate whether notification should be sent on this batch completion.
     */
    getNotifyOnCompletion(): boolean;
    /**
     * @param {boolean} notifyOnCompletion - Indicate whether notification should be sent on this batch completion.
     * @return {this}
     */
    setNotifyOnCompletion(notifyOnCompletion: boolean): this;
    /**
     * @return {boolean}
     */
    getIsCompleted(): boolean;
    /**
     * @param {boolean} isCompleted
     * @return {this}
     */
    setIsCompleted(isCompleted: boolean): this;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @override
     */
    toString(): string;
    _generateAndSetId(): void;
}
declare namespace BatchInfo {
    export { BatchInfoObject };
}
type BatchInfoObject = {
    id?: string;
    name?: string;
    startedAt?: any | string;
    sequenceName?: string;
    notifyOnCompletion?: boolean;
};
