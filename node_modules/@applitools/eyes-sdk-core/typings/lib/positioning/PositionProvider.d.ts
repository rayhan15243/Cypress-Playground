export = PositionProvider;
/**
 * Encapsulates page/element positioning.
 *
 * @abstract
 */
declare class PositionProvider {
    /**
     * @return {Promise<Location>} - The current position, or {@code null} if position is not available.
     */
    getCurrentPosition(): Promise<Location>;
    /**
     * Go to the specified location.
     *
     * @param {Location} location - The position to set.
     * @return {Promise<Location>}
     */
    setPosition(location: Location): Promise<Location>;
    /**
     * @return {Promise<RectangleSize>} - The entire size of the container which the position is relative to.
     */
    getEntireSize(): Promise<any>;
    /**
     * Get the current state of the position provider. This is different from {@link #getCurrentPosition()} in
     * that the state of the position provider might include other model than just the coordinates.
     * For example a CSS translation based position provider (in WebDriver based SDKs), might save the
     * entire "transform" style value as its state.
     *
     * @return {Promise<PositionMemento>} The current state of the position provider, which can later be restored by
     *   passing it as a parameter to {@link #restoreState}.
     */
    getState(): Promise<any>;
    /**
     * Restores the state of the position provider to the state provided as a parameter.
     *
     * @param {PositionMemento} state - The state to restore to.
     * @return {Promise}
     */
    restoreState(state: any): Promise<any>;
    /**
     * @return {*}
     */
    getScrolledElement(): any;
    /**
     * @override
     */
    toString(): string;
}
