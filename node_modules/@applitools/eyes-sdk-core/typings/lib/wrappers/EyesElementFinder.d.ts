export = EyesElementFinder;
/**
 * @typedef {import('../logging/Logger')} Logger
 * @typedef {import('./EyesWrappedElement').EyesSelector} EyesSelector
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./EyesWrappedDriver')<TDriver, TElement, TSelector>} EyesWrappedDriver
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./EyesWrappedElement')<TDriver, TElement, TSelector>} EyesWrappedElement
 */
/**
 * The object which implements the lowest-level functions to work with element finder
 * @template TDriver, TElement, TSelector
 * @typedef SpecElementFinder
 * @prop {(logger: Logger, driver: EyesWrappedDriver<TDriver, TElement, TSelector>, element: TElement, selector: TSelector) => EyesWrappedElement<TDriver, TElement, TSelector>} createElement - return wrapped element instance
 * @prop {(driver: TDriver, selector: TSelector) => TElement} findElement - return found element
 * @prop {(driver: TDriver, selector: TSelector) => TElement} findElements - return found elements
 * @prop {(selector: EyesSelector) => TSelector} toSupportedSelector - translate cross SDK selector to SDK specific selector
 * @prop {(selector: TSelector) => EyesSelector} toEyesSelector - translate SDK specific selector to cross SDK selector
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {new (logger: Logger, driver: EyesWrappedDriver<TDriver, TElement, TSelector>) => EyesElementFinder<TDriver, TElement, TSelector>} EyesElementFinderCtor
 */
/**
 * @template TDriver - TDriver provided by wrapped framework
 * @template TElement - TElement provided by wrapped framework
 * @template TSelector - TSelector supported by framework
 */
declare class EyesElementFinder<TDriver, TElement, TSelector> {
    /**
     * @template TDriver, TElement, TSelector
     * @param {SpecElementFinder<TDriver, TElement, TSelector>} spec - specifications for the specific framework
     * @return {EyesElementFinderCtor<TDriver, TElement, TSelector>} specialized version of this class
     */
    static specialize<TDriver_1, TElement_1, TSelector_1>(spec: SpecElementFinder<TDriver_1, TElement_1, TSelector_1>): new (logger: Logger, driver: import("./EyesWrappedDriver")<TDriver_1, TElement_1, TSelector_1>) => EyesElementFinder<TDriver_1, TElement_1, TSelector_1>;
    /**
     * @type {SpecElementFinder}
     */
    static get spec(): any;
    /**
     * Construct an element finder instance
     * @param {Logger} logger - logger instance
     * @param {EyesWrappedDriver<TDriver, TElement, TSelector>} driver - wrapped driver instance
     */
    constructor(logger: Logger, driver: import("./EyesWrappedDriver")<TDriver, TElement, TSelector>);
    /** @type {SpecElementFinder<TDriver, TElement, TSelector>} */
    get spec(): SpecElementFinder<TDriver, TElement, TSelector>;
    _logger: import("../logging/Logger");
    _driver: import("./EyesWrappedDriver")<TDriver, TElement, TSelector>;
    /**
     * Returns first founded element
     * @param {TSelector|EyesSelector} selector - selector supported by current implementation
     * @return {Promise<EyesWrappedElement<TDriver, TElement, TSelector>>}
     */
    findElement(selector: import("./EyesWrappedElement").EyesSelector | TSelector): Promise<import("./EyesWrappedElement")<TDriver, TElement, TSelector>>;
    /**
     * Returns all founded element
     * @param {TSelector|EyesSelector} selector - selector supported by current implementation
     * @return {Promise<EyesWrappedElement<TDriver, TElement, TSelector>[]>}
     */
    findElements(selector: import("./EyesWrappedElement").EyesSelector | TSelector): Promise<import("./EyesWrappedElement")<TDriver, TElement, TSelector>[]>;
}
declare namespace EyesElementFinder {
    export { Logger, EyesSelector, EyesWrappedDriver, EyesWrappedElement, SpecElementFinder, EyesElementFinderCtor };
}
/**
 * The object which implements the lowest-level functions to work with element finder
 */
type SpecElementFinder<TDriver, TElement, TSelector> = {
    /**
     * - return wrapped element instance
     */
    createElement: (logger: Logger, driver: import("./EyesWrappedDriver")<TDriver, TElement, TSelector>, element: TElement, selector: TSelector) => import("./EyesWrappedElement")<TDriver, TElement, TSelector>;
    /**
     * - return found element
     */
    findElement: (driver: TDriver, selector: TSelector) => TElement;
    /**
     * - return found elements
     */
    findElements: (driver: TDriver, selector: TSelector) => TElement;
    /**
     * - translate cross SDK selector to SDK specific selector
     */
    toSupportedSelector: (selector: EyesSelector) => TSelector;
    /**
     * - translate SDK specific selector to cross SDK selector
     */
    toEyesSelector: (selector: TSelector) => EyesSelector;
};
type EyesSelector = {
    type: "css" | "xpath";
    selector: string;
};
type EyesWrappedElement<TDriver, TElement, TSelector> = import("./EyesWrappedElement")<TDriver, TElement, TSelector>;
type EyesElementFinderCtor<TDriver, TElement, TSelector> = new (logger: Logger, driver: import("./EyesWrappedDriver")<TDriver, TElement, TSelector>) => EyesElementFinder<TDriver, TElement, TSelector>;
type Logger = import("../logging/Logger");
type EyesWrappedDriver<TDriver, TElement, TSelector> = import("./EyesWrappedDriver")<TDriver, TElement, TSelector>;
