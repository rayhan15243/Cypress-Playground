export = EyesDriverController;
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./EyesWrappedDriver')<TDriver, TElement, TSelector>} EyesWrappedDriver
 */
/**
 * The object which implements the lowest-level functions to work with element finder
 * @template TDriver, TElement, TSelector
 * @typedef SpecDriverController
 * @prop {(driver: TDriver) => Promise<{x: number, y: number}>} getWindowLocation - return location of the window on the screen
 * @prop {(driver: TDriver, location: {x: number, y: number}) => Promise<void>} setWindowLocation - set location of the window on the screen
 * @prop {(driver: TDriver) => Promise<{width: number, height: number}>} getWindowSize - return size of the window
 * @prop {(driver: TDriver, size: {width: number, height: number}) => Promise<void>} setWindowSize - set size of the window
 * @prop {(driver: TDriver) => Promise<'landscape'|'portrait'>} getOrientation - return string which represents screen orientation
 * @prop {(driver: TDriver) => Promise<boolean>} isMobile - true if a mobile device, false otherwise
 * @prop {(driver: TDriver) => Promise<boolean>} isAndroid - true if an Android device, false otherwise
 * @prop {(driver: TDriver) => Promise<boolean>} isIOS - true if an iOS device, false otherwise
 * @prop {(driver: TDriver) => Promise<boolean>} isNative - true if a native app, false otherwise
 * @prop {(driver: TDriver) => Promise<string>} getPlatformVersion - return version of the device's platform
 * @prop {(driver: TDriver) => Promise<string>} getSessionId - return id of the running session
 * @prop {(driver: TDriver) => Promise<string|Buffer>} takeScreenshot - return screenshot of the viewport
 * @prop {(driver: TDriver) => Promise<string>} getTitle - return page title
 * @prop {(driver: TDriver) => Promise<string>} getSource - return current url
 * @prop {(driver: TDriver, url: string) => Promise<void>} visit - redirect to the specified url
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {new (logger: Logger, driver: EyesWrappedDriver<TDriver, TElement, TSelector>) => EyesDriverController<TDriver, TElement, TSelector>} EyesDriverControllerCtor
 */
/**
 * @template TDriver - TDriver provided by wrapped framework
 * @template TElement - TElement provided by wrapped framework
 * @template TSelector - TSelector supported by framework
 */
declare class EyesDriverController<TDriver, TElement, TSelector> {
    /**
     * @template TDriver, TElement, TSelector
     * @param {SpecDriverController<TDriver, TElement, TSelector>} spec - specifications for the specific framework
     * @return {EyesDriverControllerCtor<TDriver, TElement, TSelector>} specialized version of this class
     */
    static specialize<TDriver_1, TElement_1, TSelector_1>(spec: SpecDriverController<TDriver_1, TElement_1, TSelector_1>): new (logger: any, driver: import("./EyesWrappedDriver")<TDriver_1, TElement_1, TSelector_1>) => EyesDriverController<TDriver_1, TElement_1, TSelector_1>;
    /**
     * @type {SpecDriverController}
     */
    static get spec(): any;
    /**
     * Construct a driver controller instance
     * @param {Logger} logger - logger instance
     * @param {EyesWrappedDriver<TDriver, TElement, TSelector>} driver - wrapped driver instance
     */
    constructor(logger: any, driver: import("./EyesWrappedDriver")<TDriver, TElement, TSelector>);
    /** @type {SpecDriverController<TDriver, TElement, TSelector>} */
    get spec(): SpecDriverController<TDriver, TElement, TSelector>;
    _logger: any;
    _driver: import("./EyesWrappedDriver")<TDriver, TElement, TSelector>;
    /**
     * Get window location
     * @return {Promise<Location>} windows location
     */
    getWindowLocation(): Promise<Location>;
    /**
     * Set window location
     * @param {Location} location - required  windows location
     * @returns {Promise<void>}
     */
    setWindowLocation(location: Location): Promise<void>;
    /**
     * Get window size
     * @return {Promise<RectangleSize>} windows size
     */
    getWindowSize(): Promise<import("../geometry/RectangleSize")>;
    /**
     * Set window size
     * @param {RectangleSize} size - required windows size
     * @returns {Promise<void>}
     */
    setWindowSize(size: import("../geometry/RectangleSize")): Promise<void>;
    /**
     * Take screenshot of the current viewport
     * @return {Promise<MutableImage>} image of screenshot
     */
    takeScreenshot(): Promise<import("../images/MutableImage")>;
    /**
     * Check if running in landscape orientation
     * @return {Promise<boolean>} true if landscape orientation detected, false otherwise
     */
    isLandscapeOrientation(): Promise<boolean>;
    /**
     * Check if running in mobile device
     * @return {Promise<boolean>} true if mobile, false otherwise
     */
    isMobile(): Promise<boolean>;
    /**
     * Check if running in mobile device with native context
     * @return {Promise<boolean>} true if native, false otherwise
     */
    isNative(): Promise<boolean>;
    /**
     * Get mobile OS if detected
     * @return {Promise<?string>} mobile OS if detected, null otherwise
     */
    getMobileOS(): Promise<string | null>;
    /**
     * Get browser name
     * @return {Promise<?string>} browser name if detected, null otherwise
     */
    getBrowserName(): Promise<string | null>;
    /**
     * Get browser version
     * @return {Promise<?string>} browser version if detected, null otherwise
     */
    getBrowserVersion(): Promise<string | null>;
    /**
     * Get AUT session ID
     * @return {Promise<string>} AUT session ID
     */
    getAUTSessionId(): Promise<string>;
    /**
     * Get user agent
     * @return {Promise<string>} user agent
     */
    getUserAgent(): Promise<string>;
    /**
     * Get current page title
     * @return {Promise<string>} current page title
     */
    getTitle(): Promise<string>;
    /**
     * Get current page url
     * @return {Promise<string>} current page url
     */
    getSource(): Promise<string>;
}
declare namespace EyesDriverController {
    export { EyesWrappedDriver, SpecDriverController, EyesDriverControllerCtor };
}
/**
 * The object which implements the lowest-level functions to work with element finder
 */
type SpecDriverController<TDriver, TElement, TSelector> = {
    /**
     * - return location of the window on the screen
     */
    getWindowLocation: (driver: TDriver) => Promise<{
        x: number;
        y: number;
    }>;
    /**
     * - set location of the window on the screen
     */
    setWindowLocation: (driver: TDriver, location: {
        x: number;
        y: number;
    }) => Promise<void>;
    /**
     * - return size of the window
     */
    getWindowSize: (driver: TDriver) => Promise<{
        width: number;
        height: number;
    }>;
    /**
     * - set size of the window
     */
    setWindowSize: (driver: TDriver, size: {
        width: number;
        height: number;
    }) => Promise<void>;
    /**
     * - return string which represents screen orientation
     */
    getOrientation: (driver: TDriver) => Promise<'landscape' | 'portrait'>;
    /**
     * - true if a mobile device, false otherwise
     */
    isMobile: (driver: TDriver) => Promise<boolean>;
    /**
     * - true if an Android device, false otherwise
     */
    isAndroid: (driver: TDriver) => Promise<boolean>;
    /**
     * - true if an iOS device, false otherwise
     */
    isIOS: (driver: TDriver) => Promise<boolean>;
    /**
     * - true if a native app, false otherwise
     */
    isNative: (driver: TDriver) => Promise<boolean>;
    /**
     * - return version of the device's platform
     */
    getPlatformVersion: (driver: TDriver) => Promise<string>;
    /**
     * - return id of the running session
     */
    getSessionId: (driver: TDriver) => Promise<string>;
    /**
     * - return screenshot of the viewport
     */
    takeScreenshot: (driver: TDriver) => Promise<string | Buffer>;
    /**
     * - return page title
     */
    getTitle: (driver: TDriver) => Promise<string>;
    /**
     * - return current url
     */
    getSource: (driver: TDriver) => Promise<string>;
    /**
     * - redirect to the specified url
     */
    visit: (driver: TDriver, url: string) => Promise<void>;
};
declare const Location: typeof import("../geometry/Location");
type EyesDriverControllerCtor<TDriver, TElement, TSelector> = new (logger: any, driver: import("./EyesWrappedDriver")<TDriver, TElement, TSelector>) => EyesDriverController<TDriver, TElement, TSelector>;
type EyesWrappedDriver<TDriver, TElement, TSelector> = import("./EyesWrappedDriver")<TDriver, TElement, TSelector>;
