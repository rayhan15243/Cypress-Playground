export = AppEnvironment;
/**
 * The environment in which the application under test is executing.
 */
declare class AppEnvironment {
    /**
     * Creates a new AppEnvironment instance.
     *
     * @param {string} inferred
     * @return {AppEnvironment}
     */
    static fromInferred(inferred: string): AppEnvironment;
    /**
     * Creates a new AppEnvironment instance.
     * @param data
     * @param {string} [data.os]
     * @param {string} [data.hostingApp]
     * @param {RectangleSize} [data.displaySize]
     * @param {string} [data.deviceInfo]
     * @param {string} [data.osInfo]
     * @param {string} [data.hostingAppInfo]
     */
    constructor({ os, hostingApp, displaySize, deviceInfo, osInfo, hostingAppInfo }?: {
        os: any;
        hostingApp: any;
        displaySize: any;
        deviceInfo: any;
        osInfo: any;
        hostingAppInfo: any;
    });
    _os: any;
    _hostingApp: any;
    _displaySize: any;
    _deviceInfo: any;
    _osInfo: any;
    _hostingAppInfo: any;
    /** @type {string} */
    _inferred: string;
    /**
     * Gets the information inferred from the execution environment or {@code null} if no information could be inferred.
     *
     * @return {string}
     */
    geInferred(): string;
    /**
     * Sets the inferred environment information.
     *
     * @param {string} value
     */
    setInferred(value: string): void;
    /**
     * Gets the OS hosting the application under test or {@code null} if unknown.
     *
     * @return {string}
     */
    getOs(): string;
    /**
     * Sets the OS hosting the application under test or {@code null} if unknown.
     *
     * @param {string} value
     */
    setOs(value: string): void;
    /**
     * Gets the application hosting the application under test or {@code null} if unknown.
     *
     * @return {string}
     */
    getHostingApp(): string;
    /**
     * Sets the application hosting the application under test or {@code null} if unknown.
     *
     * @param {string} value
     */
    setHostingApp(value: string): void;
    /**
     * Gets the display size of the application or {@code null} if unknown.
     *
     * @return {RectangleSize}
     */
    getDisplaySize(): import("./geometry/RectangleSize");
    /**
     * Sets the display size of the application or {@code null} if unknown.
     *
     * @param {RectangleSize} value
     */
    setDisplaySize(value: import("./geometry/RectangleSize")): void;
    /**
     * Gets the OS hosting the application under test or {@code null} if unknown. (not part of test signature)
     *
     * @return {string}
     */
    getOsInfo(): string;
    /**
     * Sets the OS hosting the application under test or {@code null} if unknown. (not part of test signature)
     *
     * @param {string} value
     */
    setOsInfo(value: string): void;
    /**
     * Gets the application hosting the application under test or {@code null} if unknown. (not part of test signature)
     *
     * @return {string}
     */
    getHostingAppInfo(): string;
    /**
     * Sets the application hosting the application under test or {@code null} if unknown. (not part of test signature)
     *
     * @param {string} value
     */
    setHostingAppInfo(value: string): void;
    /**
     * Gets the device info (not part of test signature)
     *
     * @return {string}
     */
    getDeviceInfo(): string;
    /**
     * Sets the device info (not part of test signature)
     *
     * @param {string} value
     */
    setDeviceInfo(value: string): void;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @override
     */
    toString(): string;
}
