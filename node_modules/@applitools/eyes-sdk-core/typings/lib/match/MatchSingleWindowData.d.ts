export = MatchSingleWindowData;
declare const MatchSingleWindowData_base: typeof import("./MatchWindowData");
/**
 * Encapsulates the data to be sent to the agent on a "matchWindow" command.
 *
 * @ignore
 */
declare class MatchSingleWindowData extends MatchSingleWindowData_base {
    /**
     * @param {SessionStartInfo} startInfo - The start parameters for the session.
     * @param {Trigger[]} userInputs - A list of triggers between the previous matchWindow call and the current matchWindow
     *   call. Can be array of size 0, but MUST NOT be null.
     * @param {AppOutput} appOutput - The appOutput for the current matchWindow call.
     * @param {string} tag - The tag of the window to be matched.
     * @param {boolean} [ignoreMismatch]
     * @param {Options} [options]
     */
    constructor({ startInfo, userInputs, appOutput, tag, ignoreMismatch, options }?: any, ...args: any[]);
    _startInfo: any;
    _updateBaseline: boolean;
    _updateBaselineIfDifferent: boolean;
    _updateBaselineIfNew: boolean;
    _removeSession: boolean;
    _removeSessionIfMatching: boolean;
    /** @type {string} */
    _agentId: string;
    /**
     * @return {SessionStartInfo}
     */
    getStartInfo(): any;
    /**
     * @param {SessionStartInfo} startInfo
     */
    setStartInfo(startInfo: any): void;
    /**
     * @return {boolean}
     */
    getUpdateBaseline(): boolean;
    /**
     * @param {boolean} updateBaseline
     */
    setUpdateBaseline(updateBaseline: boolean): void;
    /**
     * @return {boolean}
     */
    getUpdateBaselineIfDifferent(): boolean;
    /**
     * @param {boolean} updateBaselineIfDifferent
     */
    setUpdateBaselineIfDifferent(updateBaselineIfDifferent: boolean): void;
    /**
     * @return {boolean}
     */
    getUpdateBaselineIfNew(): boolean;
    /**
     * @param {boolean} updateBaselineIfNew
     */
    setUpdateBaselineIfNew(updateBaselineIfNew: boolean): void;
    /**
     * @return {boolean}
     */
    getRemoveSession(): boolean;
    /**
     * @param {boolean} removeSession
     */
    setRemoveSession(removeSession: boolean): void;
    /**
     * @return {boolean}
     */
    getRemoveSessionIfMatching(): boolean;
    /**
     * @param {boolean} removeSessionIfMatching
     */
    setRemoveSessionIfMatching(removeSessionIfMatching: boolean): void;
    /**
     * @return {string}
     */
    getAgentId(): string;
    /**
     * @param {string} agentId
     */
    setAgentId(agentId: string): void;
}
