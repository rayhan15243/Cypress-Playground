export = ImageMatchOptions;
/**
 * Encapsulates the "Options" section of the MatchExpectedOutput body data.
 */
declare class ImageMatchOptions {
    /**
     * @param options
     * @param {string} options.name - The tag of the window to be matched.
     * @param {string} options.renderId - The render ID of the screenshot to match.
     * @param {Trigger[]} options.userInputs - A list of triggers between the previous matchWindow call and the current matchWindow
     *   call. Can be array of size 0, but MUST NOT be null.
     * @param {boolean} options.ignoreMismatch - Tells the server whether or not to store a mismatch for the current window as
     *   window in the session.
     * @param {boolean} options.ignoreMatch - Tells the server whether or not to store a match for the current window as window in
     *   the session.
     * @param {boolean} options.forceMismatch - Forces the server to skip the comparison process and mark the current window as a
     *   mismatch.
     * @param {boolean} options.forceMatch - Forces the server to skip the comparison process and mark the current window as a
     *   match.
     * @param {ImageMatchSettings} options.imageMatchSettings - Settings specifying how the server should compare the image.
     * @param {string} options.source
     */
    constructor({ name, renderId, userInputs, ignoreMismatch, ignoreMatch, forceMismatch, forceMatch, imageMatchSettings, source, }?: {
        name: any;
        renderId: any;
        userInputs: any;
        ignoreMismatch: any;
        ignoreMatch: any;
        forceMismatch: any;
        forceMatch: any;
        imageMatchSettings: any;
        source: any;
    }, ...args: any[]);
    _name: any;
    _renderId: any;
    _userInputs: any;
    _ignoreMismatch: any;
    _ignoreMatch: any;
    _forceMismatch: any;
    _forceMatch: any;
    _imageMatchSettings: any;
    _source: any;
    /**
     * @return {string}
     */
    getName(): string;
    /**
     * @return {string}
     */
    getRenderId(): string;
    /**
     * @return {Trigger[]}
     */
    getUserInputs(): any[];
    /**
     * @return {boolean}
     */
    getIgnoreMismatch(): boolean;
    /**
     * @return {boolean}
     */
    getIgnoreMatch(): boolean;
    /**
     * @return {boolean}
     */
    getForceMismatch(): boolean;
    /**
     * @return {boolean}
     */
    getForceMatch(): boolean;
    /**
     * @return {ImageMatchSettings}
     */
    getImageMatchSettings(): any;
    /**
     * @return {string}
     */
    getSource(): string;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @override
     */
    toString(): string;
}
