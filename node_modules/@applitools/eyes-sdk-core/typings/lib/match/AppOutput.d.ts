export = AppOutput;
/**
 * An application output (title, image, etc).
 *
 * @ignore
 */
declare class AppOutput {
    /**
     * @param {object} output
     * @param {string} output.title - The title of the screen of the application being captured.
     * @param {Buffer} [output.screenshot] - Base64 encoding of the screenshot's bytes (the byte can be in either in compressed
     *   or uncompressed form)
     * @param {string} [output.screenshotUrl] - The URL that points to the screenshot
     * @param {string} [output.domUrl] - URL that points to a dom capture of the provided screenshot
     * @param {Location} [output.imageLocation] - Location of the provided screenshot relative to the logical full-page
     *   screenshot (e.g. in checkRegion)
     */
    constructor({ title, screenshot, screenshotUrl, domUrl, imageLocation }?: {
        title: string;
        screenshot: Buffer;
        screenshotUrl: string;
        domUrl: string;
        imageLocation: Location;
    }, ...args: any[]);
    _title: string;
    _screenshot64: Buffer;
    _screenshotUrl: string;
    _domUrl: string;
    _imageLocation: Location;
    /**
     * @return {string}
     */
    getTitle(): string;
    /**
     * @param {string} value
     */
    setTitle(value: string): void;
    /**
     * @return {Buffer}
     */
    getScreenshot64(): Buffer;
    /**
     * @param {Buffer} value
     */
    setScreenshot64(value: Buffer): void;
    /**
     * @return {string}
     */
    getScreenshotUrl(): string;
    /**
     * @param {string} value
     */
    setScreenshotUrl(value: string): void;
    /**
     * @return {string}
     */
    getDomUrl(): string;
    /**
     * @param {string} value
     */
    setDomUrl(value: string): void;
    /**
     * @return {Location}
     */
    getImageLocation(): Location;
    /**
     * @param {Location} value
     */
    setImageLocation(value: Location): void;
    /**
     * @override
     */
    toJSON(): {
        title: string;
    };
    /**
     * @override
     */
    toString(): string;
}
