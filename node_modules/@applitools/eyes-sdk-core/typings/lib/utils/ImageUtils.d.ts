/**
 * Processes a PNG buffer - returns it as parsed Image.
 *
 * @param {Buffer} buffer - Original image as PNG Buffer
 * @return {Promise<png.Image|Image>} - Decoded png image with byte buffer
 */
export function parseImage(buffer: Buffer): Promise<import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement)>;
/**
 * Repacks a parsed Image to a PNG buffer.
 *
 * @param {png.Image|Image} image - Parsed image as returned from parseImage
 * @return {Promise<Buffer>} - PNG buffer which can be written to file or base64 string
 */
export function packImage(image: import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement)): Promise<Buffer>;
/**
 * Create a new empty image of given size
 *
 * @param {number} width
 * @param {number} height
 * @return {png.Image|Image}
 */
export function createImage(width: number, height: number): import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement);
/**
 * Scaled a parsed image by a given factor.
 *
 * @param {png.Image|Image} image - will be modified
 * @param {number} scaleRatio - factor to multiply the image dimensions by (lower than 1 for scale down)
 * @return {Promise<png.Image|Image>}
 */
export function scaleImage(image: import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement), scaleRatio: number): Promise<import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement)>;
/**
 * Resize a parsed image by a given dimensions.
 *
 * @param {png.Image|Image} image - will be modified
 * @param {number} targetWidth - The width to resize the image to
 * @param {number} targetHeight - The height to resize the image to
 * @return {Promise<png.Image|Image>}
 */
export function resizeImage(image: import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement), targetWidth: number, targetHeight: number): Promise<import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement)>;
/**
 * Crops a parsed image - the image is changed
 *
 * @param {png.Image|Image} image
 * @param {Region} region - Region to crop
 * @return {Promise<png.Image|Image>}
 */
export function cropImage(image: import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement), region: any): Promise<import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement)>;
/**
 * Rotates an image clockwise by a number of degrees rounded to the nearest 90 degrees.
 *
 * @param {png.Image|Image} image - A parsed image, the image will be changed
 * @param {number} degrees - The number of degrees to rotate the image by
 * @return {Promise<png.Image|Image>}
 */
export function rotateImage(image: import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement), degrees: number): Promise<import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement)>;
/**
 * Copies pixels from the source image to the destination image.
 *
 * @param {png.Image|Image} dstImage - The destination image.
 * @param {{x: number, y: number}} dstPosition - The pixel which is the starting point to copy to.
 * @param {png.Image|Image} srcImage - The source image.
 * @param {{x: number, y: number}} srcPosition - The pixel from which to start copying.
 * @param {{width: number, height: number}} size - The region to be copied.
 */
export function copyPixels(dstImage: import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement), dstPosition: {
    x: number;
    y: number;
}, srcImage: import("png-async").Image | (new (width?: number, height?: number) => HTMLImageElement), srcPosition: {
    x: number;
    y: number;
}, size: {
    width: number;
    height: number;
}): void;
/**
 * Get png size from image buffer. Don't require parsing the image
 *
 * @param {Buffer} imageBuffer
 * @return {{width: number, height: number}}
 */
export function getImageSizeFromBuffer(imageBuffer: Buffer): {
    width: number;
    height: number;
};
