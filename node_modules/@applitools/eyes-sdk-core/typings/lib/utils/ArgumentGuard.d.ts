/**
 * Fails if the input parameter equals the input value.
 *
 * @param {object} param - The input parameter.
 * @param {object} value - The input value.
 * @param {string} paramName - The input parameter name.
 */
export function notEqual(param: object, value: object, paramName: string): void;
/**
 * Fails if the input parameter contains some special characters or punctuation
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 */
export function alphanumeric(param: object, paramName: string): void;
/**
 * Fails if the input parameter is null.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 */
export function notNull(param: object, paramName: string): void;
/**
 * Fails if the input parameter is not null.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 */
export function isNull(param: object, paramName: string): void;
/**
 * Fails if the input parameter string is null or empty.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 */
export function notNullOrEmpty(param: object, paramName: string): void;
/**
 * Fails if the input integer parameter is negative.
 *
 * @param {number} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} shouldBeInteger - Whether or not, the number should be en integer
 */
export function greaterThanOrEqualToZero(param: number, paramName: string, shouldBeInteger?: boolean): void;
/**
 * Fails if the input integer parameter is smaller than 1.
 *
 * @param {number} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} isInteger - Whether or not, the number should be en integer
 */
export function greaterThanZero(param: number, paramName: string, isInteger?: boolean): void;
/**
 * Fails if the input integer parameter is equal to 0.
 *
 * @param {number} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} isInteger - Whether or not, the number should be en integer
 */
export function notZero(param: number, paramName: string, isInteger?: boolean): void;
/**
 * Fails if the input number is not integer
 *
 * @param {number} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isInteger(param: number, paramName: string, strict?: boolean): void;
/**
 * Fails if param is not a string.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isString(param: object, paramName: string, strict?: boolean): void;
/**
 * Fails if param is not a number.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isNumber(param: object, paramName: string, strict?: boolean): void;
/**
 * Fails if param is not a boolean.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isBoolean(param: object, paramName: string, strict?: boolean): void;
/**
 * Fails if param is not an array.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isArray(param: object, paramName: string, strict?: boolean): void;
/**
 * Fails if param is not a plain object.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isPlainObject(param: object, paramName: string, strict?: boolean): void;
/**
 * Fails if param is not a buffer.
 *
 * @param {object} param - The input parameter.
 * @param {string} paramName - The input parameter name.
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isBuffer(param: object, paramName: string, strict?: boolean): void;
/**
 * Fails if param is not a base64 string.
 *
 * @param {object} param - The input parameter.
 */
export function isBase64(param: object): void;
/**
 * Fails if isValid is false.
 *
 * @param {boolean} isValid - Whether the current state is valid.
 * @param {string} errMsg - A description of the error.
 */
export function isValidState(isValid: boolean, errMsg: string): void;
/**
 * Fails if isValid is false.
 *
 * @param {object} param - The input parameter.
 * @param {object} type - The expected param type
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isValidType(param: object, type: object, strict?: boolean): void;
/**
 * Fails if isValid is false.
 *
 * @param {*} value - The input value.
 * @param {object} enumObject - The required enum object
 * @param {boolean} [strict=true] - If {@code false} then the value can be null|undefined
 */
export function isValidEnumValue(value: any, enumObject: object, strict?: boolean): void;
/**
 * Check if object contains all required properties
 *
 * @param {object} object - The input object.
 * @param {string|string[]} properties - The array of properties to test
 * @param {string} paramName - The input parameter name.
 */
export function hasProperties(object: object, properties: string | string[], paramName: string): void;
