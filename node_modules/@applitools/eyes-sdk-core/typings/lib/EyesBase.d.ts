export = EyesBase;
/**
 * Core/Base class for Eyes - to allow code reuse for different SDKs (images, selenium, etc).
 */
declare class EyesBase {
    /**
     * @private
     * @param {RegionProvider} regionProvider
     * @param {string} tag
     * @param {boolean} ignoreMismatch
     * @param {CheckSettings} checkSettings
     * @param {EyesBase} self
     * @param {boolean} [skipStartingSession=false]
     * @param {string} [source]
     * @return {Promise<MatchResult>}
     */
    private static matchWindow;
    /**
     * Creates a new {@code EyesBase}instance that interacts with the Eyes Server at the specified url.
     *
     * @param {?string} [serverUrl] - The Eyes server URL.
     * @param {?boolean} [isDisabled=false] - Will be checked <b>before</b> any argument validation. If true, all method
     *   will immediately return without performing any action.
     * @param {Configuration} [configuration]
     */
    constructor(serverUrl?: string | null, isDisabled?: boolean | null, configuration?: import("./config/Configuration"));
    /** @var {Logger} */
    _logger: import("./logging/Logger");
    /** @var {Configuration} */
    _configuration: import("./config/Configuration");
    /** @type {ServerConnector} */
    _serverConnector: import("./server/ServerConnector");
    _userInputs: any[];
    /** @type {FailureReports} */
    _failureReports: any;
    /** @type {number} */
    _validationId: number;
    /** @type {SessionEventHandlers} */
    _sessionEventHandlers: import("./events/SessionEventHandlers");
    /** @type {MatchWindowTask} */ _matchWindowTask: import("./MatchWindowTask");
    /** @type {RunningSession} */ _runningSession: any;
    /** @type {SessionStartInfo} */ _sessionStartInfo: import("./server/SessionStartInfo");
    /** @type {boolean} */ _shouldMatchWindowRunOnceOnTimeout: boolean;
    /** @type {boolean} */ _isViewportSizeSet: boolean;
    /** @type {boolean} */ _isOpen: boolean;
    /** @type {boolean} */ _isVisualGrid: boolean;
    /** @type {boolean} */ _useImageDeltaCompression: boolean;
    /** @type {boolean} */ _render: boolean;
    /**
     * Will be set for separately for each test.
     * @type {string}
     */
    _currentAppName: string;
    /**
     * The session ID of webdriver instance
     * @type {string}
     */
    _autSessionId: string;
    /**
     * @return {Logger}
     */
    getLogger(): import("./logging/Logger");
    /**
     * Sets a handler of log messages generated by this API.
     *
     * @param {LogHandler} logHandler - Handles log messages generated by this API.
     */
    setLogHandler(logHandler: any): void;
    /**
     * @return {LogHandler} - The currently set log handler.
     */
    getLogHandler(): any;
    /**
     * @param {...string} args
     */
    log(...args: string[]): void;
    /**
     * @return {Configuration}
     */
    getConfiguration(): import("./config/Configuration");
    /**
     * @param {Configuration|object} configuration
     */
    setConfiguration(configuration: import("./config/Configuration") | object): void;
    /**
     * Sets the user given agent id of the SDK.
     *
     * @param {string} agentId - The agent ID to set.
     */
    setAgentId(agentId: string): void;
    /**
     * @return {string} - The user given agent id of the SDK.
     */
    getAgentId(): string;
    /**
     * Sets the API key of your Applitools Eyes account.
     *
     * @param {string} apiKey - The api key to be used.
     */
    setApiKey(apiKey: string): void;
    /**
     * @return {string} - The currently set API key or {@code null} if no key is set.
     */
    getApiKey(): string;
    /**
     * Sets the current server URL used by the rest client.
     *
     * @param {string} serverUrl - The URI of the rest server, or {@code null} to use the default server.
     */
    setServerUrl(serverUrl: string): void;
    /**
     * @return {string} - The URI of the eyes server.
     */
    getServerUrl(): string;
    /**
     * Sets the proxy settings to be used for all requests to Eyes server.
     * Alternatively, proxy can be set via global variables `HTTP_PROXY`, `HTTPS_PROXY`, `NO_PROXY`.
     *
     * @signature `setProxy(proxySettings)`
     * @sigparam {ProxySettings} proxySettings - The ProxySettings instance to use.
     *
     * @signature `setProxy(isEnabled)`
     * @sigparam {boolean} isEnabled - You can pass {@code false} to completely disable proxy.
     *
     * @signature `setProxy(url, username, password)`
     * @sigparam {string} url - The proxy url to be used.
     * @sigparam {string} [username] - The proxy username to be used.
     * @sigparam {string} [password] - The proxy password to be used.
     *
     * @param {?(ProxySettings|boolean|string)} varArg - The ProxySettings object or proxy url to be used.
     *  Use {@code false} to disable proxy (even if it set via env variables). Use {@code null} to reset proxy settings.
     * @param {string} [username] - The proxy username to be used.
     * @param {string} [password] - The proxy password to be used.
     */
    setProxy(varArg: (any | boolean | string) | null, username?: string, password?: string): void;
    /**
     * @return {ProxySettings} - current proxy settings used by the server connector, or {@code null} if no proxy is set.
     */
    getProxy(): any;
    /**
     * @return {number} - The timeout for web requests (in milliseconds).
     */
    getConnectionTimeout(): number;
    /**
     * Sets the connect and read timeouts for web requests.
     *
     * @param {number} connectionTimeout - Connect/Read timeout in milliseconds. 0 equals infinity.
     */
    setConnectionTimeout(connectionTimeout: number): void;
    /**
     * Whether sessions are removed immediately after they are finished.
     *
     * @param {boolean} removeSession
     */
    setRemoveSession(removeSession: boolean): void;
    /**
     * @return {boolean} - Whether sessions are removed immediately after they are finished.
     */
    getRemoveSession(): boolean;
    /**
     * @param {boolean} isDisabled - If true, all interactions with this API will be silently ignored.
     */
    setIsDisabled(isDisabled: boolean): void;
    /**
     * @return {boolean} - Whether eyes is disabled.
     */
    getIsDisabled(): boolean;
    /**
     * @return {string} - The host OS as set by the user.
     */
    getHostApp(): string;
    /**
     * Sets the host application - overrides the one in the agent string.
     *
     * @param {string} value - The application running the AUT (e.g., Chrome).
     */
    setHostApp(value: string): void;
    /**
     * @return {string} - The host OS as set by the user.
     */
    getHostOS(): string;
    /**
     * Sets the host OS name - overrides the one in the agent string.
     *
     * @param {string} value - The host OS running the AUT.
     */
    setHostOS(value: string): void;
    /**
     * @return {string} - The host OS as set by the user.
     */
    getHostAppInfo(): string;
    /**
     * Sets the host application - overrides the one in the agent string.
     *
     * @param {string} value - The application running the AUT (e.g., Chrome).
     */
    setHostAppInfo(value: string): void;
    /**
     * @return {string} - The host OS as set by the user.
     */
    getHostOSInfo(): string;
    /**
     * Sets the host OS name - overrides the one in the agent string.
     *
     * @param {string} value - The host OS running the AUT.
     */
    setHostOSInfo(value: string): void;
    /**
     * @return {string} - The application name running the AUT.
     */
    getDeviceInfo(): string;
    /**
     * Sets the host application - overrides the one in the agent string.
     *
     * @param {string} value - The application running the AUT (e.g., Chrome).
     */
    setDeviceInfo(value: string): void;
    /**
     * @param {string} appName - The name of the application under test.
     */
    setAppName(appName: string): void;
    /**
     * @return {string} - The name of the application under test.
     */
    getAppName(): string;
    /**
     * @return {string} - The name of the application under test.
     */
    getAppName(): string;
    /**
     * Sets the branch in which the baseline for subsequent test runs resides. If the branch does not already exist it
     * will be created under the specified parent branch (see {@link #setParentBranchName}). Changes to the baseline
     * or model of a branch do not propagate to other branches.
     *
     * @param {string} branchName - Branch name or {@code null} to specify the default branch.
     */
    setBranchName(branchName: string): void;
    /**
     * @return {string} - The current branch name.
     */
    getBranchName(): string;
    /**
     * Sets the branch under which new branches are created.
     *
     * @param {string} parentBranchName - Branch name or {@code null} to specify the default branch.
     */
    setParentBranchName(parentBranchName: string): void;
    /**
     * @return {string} - The name of the current parent branch under which new branches will be created.
     */
    getParentBranchName(): string;
    /**
     * Sets the baseline branch under which new branches are created.
     *
     * @param {string} baselineBranchName - Branch name or {@code null} to specify the default branch.
     */
    setBaselineBranchName(baselineBranchName: string): void;
    /**
     * @return {string} - The name of the baseline branch
     */
    getBaselineBranchName(): string;
    /**
     * Sets the maximum time (in ms) a match operation tries to perform a match.
     * @param {number} ms - Total number of ms to wait for a match.
     */
    setMatchTimeout(ms: number): void;
    /**
     * @return {number} - The maximum time in ms {@link #checkWindowBase(RegionProvider, string, boolean, number)} waits
     *   for a match.
     */
    getMatchTimeout(): number;
    /**
     * Set whether or not new tests are saved by default.
     *
     * @param {boolean} saveNewTests - True if new tests should be saved by default. False otherwise.
     */
    setSaveNewTests(saveNewTests: boolean): void;
    /**
     * @return {boolean} - True if new tests are saved by default.
     */
    getSaveNewTests(): boolean;
    /**
     * Set whether or not failed tests are saved by default.
     *
     * @param {boolean} saveFailedTests - True if failed tests should be saved by default, false otherwise.
     */
    setSaveFailedTests(saveFailedTests: boolean): void;
    /**
     * @return {boolean} - True if failed tests are saved by default.
     */
    getSaveFailedTests(): boolean;
    /**
     * Sets the batch in which context future tests will run or {@code null} if tests are to run standalone.
     *
     * @param {BatchInfo|BatchInfoObject|string} batchOrName - The batch name or batch object
     * @param {string} [batchId] - ID of the batch, should be generated using GeneralUtils.guid()
     * @param {string} [startedAt] - Start date of the batch, can be created as new Date().toUTCString()
     */
    setBatch(batchOrName: any | any | string, batchId?: string, startedAt?: string, ...args: any[]): void;
    /**
     * @return {BatchInfo} - The currently set batch info.
     */
    getBatch(): any;
    /**
     * Adds a property to be sent to the server.
     *
     * @param {string} name - The property name.
     * @param {string} value - The property value.
     */
    addProperty(name: string, value: string): this;
    /**
     * Clears the list of custom properties.
     */
    clearProperties(): void;
    /**
     * Automatically save differences as a baseline.
     *
     * @param {boolean} saveDiffs - Sets whether to automatically save differences as baseline.
     */
    setSaveDiffs(saveDiffs: boolean): void;
    /**
     * @return {boolean} - whether to automatically save differences as baseline.
     */
    getSaveDiffs(): boolean;
    /**
     * @param {boolean} sendDom
     */
    setSendDom(sendDom: boolean): void;
    /**
     * @return {boolean}
     */
    getSendDom(): boolean;
    /**
     * @param {boolean} compareWithParentBranch - New compareWithParentBranch value, default is false
     */
    setCompareWithParentBranch(compareWithParentBranch: boolean): void;
    /**
     * @deprecated Use {@link #getCompareWithParentBranch()} instead
     * @return {boolean} - The currently compareWithParentBranch value
     */
    isCompareWithParentBranch(): boolean;
    /**
     * @return {boolean} - The currently compareWithParentBranch value
     */
    getCompareWithParentBranch(): boolean;
    /**
     * @param {boolean} ignoreBaseline - New ignoreBaseline value, default is false
     */
    setIgnoreBaseline(ignoreBaseline: boolean): void;
    /**
     * @deprecated Use {@link #getIgnoreBaseline()} instead
     * @return {boolean} - The currently ignoreBaseline value
     */
    isIgnoreBaseline(): boolean;
    /**
     * @return {boolean} - The currently ignoreBaseline value
     */
    getIgnoreBaseline(): boolean;
    /**
     * @deprecated Only available for backward compatibility. See {@link #setBaselineEnvName(string)}.
     * @param {string} baselineName - If specified, determines the baseline to compare with and disables automatic baseline
     *   inference.
     */
    setBaselineName(baselineName: string): void;
    /**
     * @deprecated Only available for backward compatibility. See {@link #getBaselineEnvName()}.
     * @return {string} - The baseline name, if it was specified.
     */
    getBaselineName(): string;
    /**
     * If not {@code null}, determines the name of the environment of the baseline.
     *
     * @param {string} baselineEnvName - The name of the baseline's environment.
     */
    setBaselineEnvName(baselineEnvName: string): void;
    /**
     * If not {@code null}, determines the name of the environment of the baseline.
     *
     * @return {string} - The name of the baseline's environment, or {@code null} if no such name was set.
     */
    getBaselineEnvName(): string;
    /**
     * If not {@code null} specifies a name for the environment in which the application under test is running.
     *
     * @deprecated use {@link setEnvironmentName} instead
     * @param {string} envName - The name of the environment of the baseline.
     */
    setEnvName(envName: string): void;
    /**
     * If not {@code null} specifies a name for the environment in which the application under test is running.
     *
     * @param {string} envName - The name of the environment of the baseline.
     */
    setEnvironmentName(envName: string): void;
    /**
     * If not {@code null} specifies a name for the environment in which the application under test is running.
     *
     * @return {string} - The name of the environment of the baseline, or {@code null} if no such name was set.
     */
    getEnvName(): string;
    /**
     * @param {string} testName - The name of the currently running test.
     */
    setTestName(testName: string): void;
    /**
     * @return {?string} - The name of the currently running test.
     */
    getTestName(): string | null;
    /**
     * @param {string} displayName - The display name of the currently running test.
     */
    setDisplayName(displayName: string): void;
    /**
     * @return {?string} - The display name of the currently running test.
     */
    getDisplayName(): string | null;
    /**
     * @return {ImageMatchSettings} - The match settings used for the session.
     */
    getDefaultMatchSettings(): any;
    /**
     * Updates the match settings to be used for the session.
     *
     * @param {ImageMatchSettings} defaultMatchSettings - The match settings to be used for the session.
     */
    setDefaultMatchSettings(defaultMatchSettings: any): void;
    /**
     * The test-wide match level to use when checking application screenshot with the expected output.
     *
     * @param {MatchLevel} matchLevel - The test-wide match level to use when checking application screenshot with the
     *   expected output.
     */
    setMatchLevel(matchLevel: any): void;
    /**
     * @return {MatchLevel} - The test-wide match level.
     */
    getMatchLevel(): any;
    /**
     * The test-wide useDom to use.
     *
     * @param {boolean} useDom - The test-wide useDom to use in match requests.
     */
    setUseDom(useDom: boolean): void;
    /**
     * @return {boolean} - The test-wide useDom to use in match requests.
     */
    getUseDom(): boolean;
    /**
     * The test-wide enablePatterns to use.
     *
     * @param {boolean} enablePatterns - The test-wide enablePatterns to use in match requests.
     */
    setEnablePatterns(enablePatterns: boolean): void;
    /**
     * @return {boolean} - The test-wide enablePatterns to use in match requests.
     */
    getEnablePatterns(): boolean;
    /**
     * The test-wide ignoreDisplacements to use.
     *
     * @param {boolean} ignoreDisplacements - The test-wide ignoreDisplacements to use in match requests.
     */
    setIgnoreDisplacements(ignoreDisplacements: boolean): void;
    /**
     * @return {boolean} - The test-wide ignoreDisplacements to use in match requests.
     */
    getIgnoreDisplacements(): boolean;
    /**
     * Sets the ignore blinking caret value.
     *
     * @param {boolean} value - The ignore value.
     */
    setIgnoreCaret(value: boolean): void;
    /**
     * @return {boolean} - Whether to ignore or the blinking caret or not when comparing images.
     */
    getIgnoreCaret(): boolean;
    /**
     * @param {boolean} [hardReset=false] - If false, init providers only if they're not initialized.
     * @private
     */
    private _initProviders;
    _scaleProviderHandler: any;
    _cutProviderHandler: any;
    _positionProviderHandler: any;
    _viewportSizeHandler: any;
    _debugScreenshotsProvider: any;
    getAndSaveRenderingInfo(): void;
    _getAndSaveBatchInfoFromServer(_batchId: any): void;
    _getScmMergeBaseTime(branchName: any, parentBranchName: any): Promise<any>;
    handleScmMergeBaseTime(): Promise<any>;
    /**
     * @param {RenderingInfo} renderingInfo
     */
    setRenderingInfo(renderingInfo: any): void;
    /**
     * Clears the user inputs list.
     *
     * @protected
     */
    protected clearUserInputs(): void;
    /**
     * @protected
     * @return {Trigger[]} - User inputs collected between {@code checkWindowBase} invocations.
     */
    protected getUserInputs(): any[];
    /**
     * @param {FailureReports} failureReports - Use one of the values in FailureReports.
     */
    setFailureReports(failureReports: any): void;
    /**
     * @return {FailureReports} - The failure reports setting.
     */
    getFailureReports(): any;
    /**
     * @return {string} - The full agent id composed of both the base agent id and the user given agent id.
     */
    getFullAgentId(): string;
    /**
     * @return {boolean} - Whether a session is open.
     */
    getIsOpen(): boolean;
    /**
     * Manually set the the sizes to cut from an image before it's validated.
     *
     * @param {CutProvider} [cutProvider] - the provider doing the cut.
     */
    setCutProvider(cutProvider?: any): void;
    /**
     * Manually set the the sizes to cut from an image before it's validated.
     *
     * @param {CutProvider} [cutProvider] - the provider doing the cut.
     */
    setImageCut(cutProvider?: any): void;
    /**
     * @return {boolean}
     */
    getIsCutProviderExplicitlySet(): boolean;
    /**
     * Manually set the scale ratio for the images being validated.
     *
     * @param {number} [scaleRatio=1] - The scale ratio to use, or {@code null} to reset back to automatic scaling.
     */
    setScaleRatio(scaleRatio?: number): void;
    /**
     * @return {number} - The ratio used to scale the images being validated.
     */
    getScaleRatio(): number;
    /**
     * @param {boolean} value - If true, createSession request will return renderingInfo properties
     */
    setRender(value: boolean): void;
    /**
     * @return {boolean}
     */
    getRender(): boolean;
    /**
     * @param {boolean} saveDebugScreenshots - If true, will save all screenshots to local directory.
     */
    setSaveDebugScreenshots(saveDebugScreenshots: boolean): void;
    /**
     * @return {boolean}
     */
    getSaveDebugScreenshots(): boolean;
    /**
     * @param {string} pathToSave - Path where you want to save the debug screenshots.
     */
    setDebugScreenshotsPath(pathToSave: string): void;
    /**
     * @return {string} - The path where you want to save the debug screenshots.
     */
    getDebugScreenshotsPath(): string;
    /**
     * @param {string} prefix - The prefix for the screenshots' names.
     */
    setDebugScreenshotsPrefix(prefix: string): void;
    /**
     * @return {string} - The prefix for the screenshots' names.
     */
    getDebugScreenshotsPrefix(): string;
    /**
     * @param {DebugScreenshotsProvider} debugScreenshotsProvider
     */
    setDebugScreenshotsProvider(debugScreenshotsProvider: any): void;
    /**
     * @return {DebugScreenshotsProvider}
     */
    getDebugScreenshotsProvider(): any;
    /**
     * Ends the currently running test.
     *
     * @param {boolean} [throwEx=true] - If true, then the returned promise will 'reject' for failed/aborted tests.
     * @return {Promise<TestResults>} - A promise which resolves/rejects (depending on the value of 'throwEx') to the test
     *   results.
     */
    close(throwEx?: boolean): Promise<import("./TestResults")>;
    _lastScreenshot: any;
    /**
     * If a test is running, aborts it. Otherwise, does nothing.
     *
     * @alias abort
     * @return {Promise<?TestResults>} - A promise which resolves to the test results.
     */
    abortIfNotClosed(): Promise<import("./TestResults") | null>;
    /**
     * If a test is running, aborts it. Otherwise, does nothing.
     *
     * @return {Promise<?TestResults>} - A promise which resolves to the test results.
     */
    abort(): Promise<import("./TestResults") | null>;
    /**
     * @return {PositionProvider} - The currently set position provider.
     */
    getPositionProvider(): any;
    /**
     * @param {PositionProvider} positionProvider - The position provider to be used.
     */
    setPositionProvider(positionProvider: any): void;
    /**
     * Takes a snapshot of the application under test and matches it with the expected output.
     *
     * @protected
     * @param {RegionProvider} regionProvider - Returns the region to check or empty region to check the entire window.
     * @param {string} [tag=''] - An optional tag to be associated with the snapshot.
     * @param {boolean} [ignoreMismatch=false] - Whether to ignore this check if a mismatch is found.
     * @param {CheckSettings} [checkSettings] - The settings to use.
     * @param {string} [source] - The tested source page.
     * @return {Promise<MatchResult>} - The result of matching the output with the expected output.
     * @throws DiffsFoundError - Thrown if a mismatch is detected and immediate failure reports are enabled.
     */
    protected checkWindowBase(regionProvider: any, tag?: string, ignoreMismatch?: boolean, checkSettings?: import("./fluent/CheckSettings"), source?: string): Promise<import("./match/MatchResult")>;
    /**
     * Takes a snapshot of the application under test and matches it with the expected output.
     *
     * @protected
     * @param {RegionProvider} regionProvider - Returns the region to check or empty rectangle to check the entire window.
     * @param {string} [tag=''] - An optional tag to be associated with the snapshot.
     * @param {boolean} [ignoreMismatch=false] - Whether to ignore this check if a mismatch is found.
     * @param {CheckSettings} [checkSettings] - The settings to use.
     * @return {Promise<TestResults>} - The result of matching the output with the expected output.
     */
    protected checkSingleWindowBase(regionProvider: any, tag?: string, ignoreMismatch?: boolean, checkSettings?: import("./fluent/CheckSettings")): Promise<import("./TestResults")>;
    /**
     * @protected
     * @return {Promise}
     */
    protected beforeMatchWindow(): Promise<any>;
    /**
     * @protected
     * @return {Promise}
     */
    protected afterMatchWindow(): Promise<any>;
    /**
     * @protected
     * @return {Promise<?string>}
     */
    protected tryCaptureDom(): Promise<string | null>;
    /**
     * @protected
     * @return {Promise<?string>}
     */
    protected getOrigin(): Promise<string | null>;
    /**
     * Replaces an actual image in the current running session.
     *
     * @param {number} stepIndex - The zero based index of the step in which to replace the actual image.
     * @param {Buffer} screenshot - The PNG bytes of the updated screenshot.
     * @param {string} [tag] - The updated tag for the step.
     * @param {string} [title] - The updated title for the step.
     * @param {Trigger[]} [userInputs] - The updated userInputs for the step.
     * @return {Promise<MatchResult>} - A promise which resolves when replacing is done, or rejects on error.
     */
    replaceWindow(stepIndex: number, screenshot: Buffer, tag?: string, title?: string, userInputs?: any[]): Promise<import("./match/MatchResult")>;
    /**
     * @private
     * @param {string} domJson
     * @return {Promise<?string>}
     */
    private _tryPostDomSnapshot;
    /**
     * @private
     * @param {string} tag
     * @param {MatchResult} result
     */
    private _validateResult;
    /**
     * Starts a test.
     *
     * @protected
     * @param {string} appName - The name of the application under test.
     * @param {string} testName - The test name.
     * @param {RectangleSize|PalinRectangleSize} [viewportSize] - The client's viewport size (i.e., the
     *   visible part of the document's body) or {@code null} to allow any viewport size.
     * @param {SessionType} [sessionType=SessionType.SEQUENTIAL] - The type of test (e.g., Progression for timing tests),
     *   or {@code null} to use the default.
     * @param {skipStartingSession} [skipStartingSession=false] - If {@code true} skip starting the session.
     * @return {Promise}
     */
    protected openBase(appName: string, testName: string, viewportSize?: import("./geometry/RectangleSize") | any, sessionType?: any, skipStartingSession?: any): Promise<any>;
    _renderingInfoPromise: void;
    _scmMergeBaseTimePromise: Promise<any>;
    /**
     * @protected
     * @return {Promise}
     */
    protected beforeOpen(): Promise<any>;
    /**
     * @protected
     * @return {Promise}
     */
    protected afterOpen(): Promise<any>;
    /**
     * @private
     * @return {Promise}
     */
    private _ensureRunningSession;
    /**
     * @private
     */
    private _validateApiKey;
    /**
     * @private
     */
    private _logOpenBase;
    /**
     * @private
     * @return {Promise}
     */
    private _validateSessionOpen;
    /**
     * Define the viewport size as {@code size} without doing any actual action on the
     *
     * @param {RectangleSize} explicitViewportSize - The size of the viewport. {@code null} disables the explicit size.
     */
    setExplicitViewportSize(explicitViewportSize: import("./geometry/RectangleSize")): void;
    /**
     * Adds a trigger to the current list of user inputs.
     *
     * @protected
     * @param {Trigger} trigger - The trigger to add to the user inputs list.
     */
    protected addUserInput(trigger: any): void;
    /**
     * Adds a text trigger.
     *
     * @protected
     * @param {Region} control - The control's position relative to the window.
     * @param {string} text - The trigger's text.
     */
    protected addTextTriggerBase(control: import("./geometry/Region"), text: string): void;
    /**
     * Adds a mouse trigger.
     *
     * @protected
     * @param {MouseTrigger.MouseAction} action - Mouse action.
     * @param {Region} control - The control on which the trigger is activated (location is relative to the window).
     * @param {Location} cursor - The cursor's position relative to the control.
     */
    protected addMouseTriggerBase(action: string, control: import("./geometry/Region"), cursor: Location): void;
    setAppEnvironment(hostOS: any, hostApp: any): void;
    /**
     * Application environment is the environment (e.g., the host OS) which runs the application under test.
     *
     * @protected
     * @return {Promise<AppEnvironment>} - The current application environment.
     */
    protected getAppEnvironment(): Promise<import("./AppEnvironment")>;
    /**
     * Start eyes session on the eyes server.
     *
     * @protected
     * @return {Promise}
     */
    protected startSession(): Promise<any>;
    /**
     * @package
     * @return {Promise}
     */
    closeBatch(): Promise<any>;
    getUserSetBatchId(): any;
    _getSetBatchId(): any;
    /**
     * @private
     * @return {Promise}
     */
    private _ensureViewportSize;
    /**
     * @private
     * @param {Region} region - The region of the screenshot which will be set in the application output.
     * @param {EyesScreenshot} lastScreenshot - Previous application screenshot (for compression) or `null` if not
     *   available.
     * @param {CheckSettings} checkSettings - The check settings object of the current test.
     * @return {Promise<AppOutputWithScreenshot>} - The updated app output and screenshot.
     */
    private _getAppOutputWithScreenshot;
    /**
     * @return {SessionEventHandlers}
     */
    getSessionEventHandlers(): import("./events/SessionEventHandlers");
    /**
     * @param {SessionEventHandler} eventHandler
     */
    addSessionEventHandler(eventHandler: any): void;
    /**
     * @param {SessionEventHandler} eventHandler
     */
    removeSessionEventHandler(eventHandler: any): void;
    clearSessionEventHandlers(): void;
    /**
     * @return {RunningSession} - An object containing data about the currently running session.
     */
    getRunningSession(): any;
    /**
     * @protected
     * @abstract
     * @return {string} - The base agent id of the SDK.
     */
    protected getBaseAgentId(): string;
    /**
     * Get the session id.
     *
     * @protected
     * @return {Promise<?string>} - A promise which resolves to the webdriver's session ID.
     */
    protected getAUTSessionId(): Promise<string | null>;
    /**
     * @protected
     * @abstract
     * @return {Promise<RectangleSize>} - The viewport size of the AUT.
     */
    protected getViewportSize(): Promise<import("./geometry/RectangleSize")>;
    /**
     * @protected
     * @abstract
     * @param {RectangleSize} size - The required viewport size.
     * @return {Promise}
     */
    protected setViewportSize(_size: any): Promise<any>;
    /**
     * The inferred string is in the format "source:info" where source is either "useragent" or "pos".
     * Information associated with a "useragent" source is a valid browser user agent string. Information associated with
     * a "pos" source is a string of the format "process-name;os-name" where "process-name" is the name of the main
     * module of the executed process and "os-name" is the OS name.
     *
     * @protected
     * @abstract
     * @return {Promise<string>} - The inferred environment string or {@code null} if none is available.
     */
    protected getInferredEnvironment(): Promise<string>;
    /**
     * An updated screenshot.
     *
     * @protected
     * @abstract
     * @return {Promise<EyesScreenshot>}
     */
    protected getScreenshot(): Promise<any>;
    /**
     * An updated screenshot.
     *
     * @protected
     * @return {Promise<?string>}
     */
    protected getScreenshotUrl(): Promise<string | null>;
    /**
     * The current title of of the AUT.
     *
     * @protected
     * @abstract
     * @return {Promise<string>}
     */
    protected getTitle(): Promise<string>;
    /**
     * A url pointing to a DOM capture of the AUT at the time of screenshot
     *
     * @protected
     * @return {Promise<?string>}
     */
    protected getDomUrl(): Promise<string | null>;
    /**
     * The location of the image relative to the logical full page image, when cropping an image e.g. with checkRegion
     *
     * @protected
     * @return {Promise<?Location>}
     */
    protected getImageLocation(): Promise<Location>;
    /**
     * @return {boolean}
     */
    isVisualGrid(): boolean;
    /**
     * @ignore
     * @param {boolean} isVisualGrid
     */
    setIsVisualGrid(isVisualGrid: boolean): void;
}
