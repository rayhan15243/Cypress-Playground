export = EyesVisualGrid;
declare const EyesVisualGrid_base: typeof import("./EyesCore");
/**
 * @typedef {import('./capture/CorsIframeHandles').CorsIframeHandle} CorsIframeHandle
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesWrappedDriver')<TDriver, TElement, TSelector>} EyesWrappedDriver
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesWrappedElement')<TDriver, TElement, TSelector>} EyesWrappedElement
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesWrappedDriver').EyesWrappedDriverCtor<TDriver, TElement, TSelector>} EyesWrappedDriverCtor
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesWrappedElement').EyesWrappedElementCtor<TDriver, TElement, TSelector>} EyesWrappedElementCtor
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesWrappedElement').EyesWrappedElementStatics<TDriver, TElement, TSelector>} EyesWrappedElementStatics
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesJsExecutor')<TDriver, TElement, TSelector>} EyesJsExecutor
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesBrowsingContext')<TDriver, TElement, TSelector>} EyesBrowsingContext
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesElementFinder')<TDriver, TElement, TSelector>} EyesElementFinder
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('./wrappers/EyesDriverController')<TDriver, TElement, TSelector>} EyesDriverController
 */
/**
 * @template TElement, TSelector
 * @typedef {import('./fluent/DriverCheckSettings')<TElement, TSelector>} CheckSettings
 */
/**
 * @template TDriver
 * @template TElement
 * @template TSelector
 * @extends {EyesCore<TDriver, TElement, TSelector>}
 */
declare class EyesVisualGrid<TDriver, TElement, TSelector> extends EyesVisualGrid_base<TDriver, TElement, TSelector> {
    /**
     * Create a specialized version of this class
     * @template TDriver, TElement, TSelector
     * @param {Object} implementations - implementations of related classes
     * @param {string} implementations.agentId - base agent id
     * @param {EyesWrappedDriverCtor<TDriver, TElement, TSelector>} implementations.WrappedDriver - implementation for {@link EyesWrappedDriver}
     * @param {EyesWrappedElementCtor<TDriver, TElement, TSelector> & EyesWrappedElementStatics<TDriver, TElement, TSelector>} implementations.WrappedElement - implementation for {@link EyesWrappedElement}
     * @param {CheckSettings<TElement, TSelector>} implementations.CheckSettings - specialized version of {@link DriverCheckSettings}
     * @param {VisualGridClient} implementations.VisualGridClient - visual grid client
     * @return {new (...args: ConstructorParameters<typeof EyesVisualGrid>) => EyesVisualGrid<TDriver, TElement, TSelector>} specialized version of this class
     */
    static specialize<TDriver_1, TElement_1, TSelector_1>({ agentId, WrappedDriver, WrappedElement, CheckSettings, VisualGridClient }: {
        agentId: string;
        WrappedDriver: new (logger: import("./logging/Logger"), driver: TDriver_1) => TDriver_1 & import("./wrappers/EyesWrappedDriver")<TDriver_1, TElement_1, TSelector_1>;
        WrappedElement: (new (logger?: import("./logging/Logger"), driver?: import("./wrappers/EyesWrappedDriver")<TDriver_1, TElement_1, TSelector_1>, element?: TElement_1, selector?: TSelector_1) => import("./wrappers/EyesWrappedElement")<TDriver_1, TElement_1, TSelector_1>) & import("./wrappers/EyesWrappedElement").EyesWrappedElementStatics<TDriver_1, TElement_1, TSelector_1>;
        CheckSettings: import("./fluent/DriverCheckSettings")<TElement_1, TSelector_1>;
        VisualGridClient: any;
    }): new (serverUrl?: string, isDisabled?: boolean, runner?: import("./runner/VisualGridRunner")) => import("./EyesVisualGrid")<TDriver_1, TElement_1, TSelector_1>;
    /**
     * Creates a new (possibly disabled) Eyes instance that interacts with the Eyes Server at the specified url.
     *
     * @param {string} [serverUrl=EyesBase.getDefaultServerUrl()] The Eyes server URL.
     * @param {boolean} [isDisabled=false] Set to true to disable Applitools Eyes and use the webdriver directly.
     * @param {VisualGridRunner} [runner] - Set {@code true} to disable Applitools Eyes and use the WebDriver directly.
     */
    constructor(serverUrl?: string, isDisabled?: boolean, runner?: import("./runner/VisualGridRunner"));
    /** @private */
    private _runner;
    /** @private @type {EyesJsExecutor<TDriver, TElement, TSelector>} */
    private _jsExecutor;
    /** @private */
    private _checkWindowCommand;
    /** @private */
    private _closeCommand;
    /** @private */
    private _abortCommand;
    /** @private @type {Promise<void>} */
    private _closePromise;
    /**
     * @param {TDriver} driver The web driver that controls the browser hosting the application under test.
     * @param {Configuration|string} optArg1 The Configuration for the test or the name of the application under the test.
     * @param {string} [optArg2] The test name.
     * @param {RectangleSize|object} [optArg3] The required browser's viewport size
     *   (i.e., the visible part of the document's body) or to use the current window's viewport.
     * @param {Configuration} [optArg4] The Configuration for the test
     * @return {Promise<TDriver & EyesWrappedDriver<TDriver, TElement, TSelector>>} A wrapped WebDriver which enables Eyes trigger recording and frame handling.
     */
    open(driver: TDriver, optArg1: import("./config/Configuration") | string, optArg2?: string, optArg3?: import("./geometry/RectangleSize") | object, optArg4?: import("./config/Configuration")): Promise<TDriver & import("./wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>>;
    _driver: any;
    _executor: any;
    _finder: any;
    _context: any;
    _controller: any;
    /**
     * @param {string|CheckSettings<TElement, TSelector>} [nameOrCheckSettings] - name of the test case
     * @param {CheckSettings<TElement, TSelector>} [checkSettings] - check settings for the described test case
     * @returns {Promise<MatchResult>}
     */
    check(nameOrCheckSettings?: string | import("./fluent/DriverCheckSettings")<TElement, TSelector>, checkSettings?: import("./fluent/DriverCheckSettings")<TElement, TSelector>): Promise<import("./match/MatchResult")>;
    /**
     * @private
     * @param {CheckSettings<TElement, TSelector>} checkSettings
     * @param {Function} operation
     */
    private _checkPrepare;
    /**
     * @private
     * @param {CheckSettings<TElement, TSelector>} checkSettings
     */
    private _getTargetConfiguration;
    /**
     * @param {boolean} [throwEx]
     * @return {Promise<void>}
     */
    closeAndPrintResults(throwEx?: boolean): Promise<void>;
}
declare namespace EyesVisualGrid {
    export { CorsIframeHandle, EyesWrappedDriver, EyesWrappedElement, EyesWrappedDriverCtor, EyesWrappedElementCtor, EyesWrappedElementStatics, EyesJsExecutor, EyesBrowsingContext, EyesElementFinder, EyesDriverController, CheckSettings };
}
type EyesWrappedDriver<TDriver, TElement, TSelector> = import("./wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>;
type CheckSettings<TElement, TSelector> = import("./fluent/DriverCheckSettings")<TElement, TSelector>;
type EyesWrappedDriverCtor<TDriver, TElement, TSelector> = new (logger: import("./logging/Logger"), driver: TDriver) => TDriver & import("./wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>;
type EyesWrappedElementCtor<TDriver, TElement, TSelector> = new (logger?: import("./logging/Logger"), driver?: import("./wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>, element?: TElement, selector?: TSelector) => import("./wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>;
type EyesWrappedElementStatics<TDriver, TElement, TSelector> = {
    fromElement: (element: TElement) => import("./wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>;
    fromSelector: (selector: TSelector) => import("./wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>;
    isCompatible: (element: any) => element is TElement;
    isSelector: (selector: any) => selector is TSelector;
    toSupportedSelector: (selector: import("./wrappers/EyesWrappedElement").EyesSelector) => TSelector;
    toEyesSelector: (selector: TSelector) => import("./wrappers/EyesWrappedElement").EyesSelector;
    extractId: (element: TElement | import("./wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>) => Promise<string>;
};
type CorsIframeHandle = "BLANK" | "KEEP" | "SNAPSHOT";
type EyesWrappedElement<TDriver, TElement, TSelector> = import("./wrappers/EyesWrappedElement")<TDriver, TElement, TSelector>;
type EyesJsExecutor<TDriver, TElement, TSelector> = import("./wrappers/EyesJsExecutor")<TDriver, TElement, TSelector>;
type EyesBrowsingContext<TDriver, TElement, TSelector> = import("./wrappers/EyesBrowsingContext")<TDriver, TElement, TSelector>;
type EyesElementFinder<TDriver, TElement, TSelector> = import("./wrappers/EyesElementFinder")<TDriver, TElement, TSelector>;
type EyesDriverController<TDriver, TElement, TSelector> = import("./wrappers/EyesDriverController")<TDriver, TElement, TSelector>;
