export = RunningSession;
/**
 * Encapsulates data for the session currently running in the agent.
 */
declare class RunningSession {
    /**
     * @param session
     * @param {string} session.id
     * @param {string} session.sessionId
     * @param {string} session.batchId
     * @param {string} session.baselineId
     * @param {string} session.url
     * @param {RenderingInfo|object} session.renderingInfo
     */
    constructor({ id, sessionId, batchId, baselineId, url, renderingInfo, isNew }?: {
        id: any;
        sessionId: any;
        batchId: any;
        baselineId: any;
        url: any;
        renderingInfo: any;
        isNew: any;
    });
    _id: any;
    _sessionId: any;
    _batchId: any;
    _baselineId: any;
    _url: any;
    _renderingInfo: any;
    _isNew: any;
    /**
     * @return {string}
     */
    getId(): string;
    /**
     * @param {string} value
     */
    setId(value: string): void;
    /**
     * @return {string}
     */
    getSessionId(): string;
    /**
     * @param {string} value
     */
    setSessionId(value: string): void;
    /**
     * @return {string}
     */
    getBatchId(): string;
    /**
     * @param {string} value
     */
    setBatchId(value: string): void;
    /**
     * @return {string}
     */
    getBaselineId(): string;
    /**
     * @param {string} value
     */
    setBaselineId(value: string): void;
    /**
     * @return {string}
     */
    getUrl(): string;
    /**
     * @param {string} value
     */
    setUrl(value: string): void;
    /**
     * @return {RenderingInfo}
     */
    getRenderingInfo(): import("./RenderingInfo");
    /**
     * @param {RenderingInfo} value
     */
    setRenderingInfo(value: import("./RenderingInfo")): void;
    /**
     * @return {boolean}
     */
    getIsNew(): boolean;
    /**
     * @param {boolean} value
     */
    setIsNew(value: boolean): void;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @override
     */
    toString(): string;
}
