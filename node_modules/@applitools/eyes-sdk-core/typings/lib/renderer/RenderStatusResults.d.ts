export = RenderStatusResults;
/**
 * Encapsulates data for the render currently running in the client.
 */
declare class RenderStatusResults {
    /**
     * @param {RenderStatus} status
     * @param {string} imageLocation
     * @param {string} domLocation
     * @param {string} error
     * @param {string} os
     * @param {string} userAgent
     * @param {RectangleSize|object} deviceSize
     * @param {Region[]||object[]} selectorRegions
     */
    constructor({ status, imageLocation, domLocation, error, os, userAgent, deviceSize, selectorRegions, }?: any);
    _status: any;
    _imageLocation: any;
    _domLocation: any;
    _error: any;
    _os: any;
    _userAgent: any;
    _deviceSize: any;
    _selectorRegions: any;
    /**
     * @return {boolean}
     */
    isEmpty(): boolean;
    /**
     * @return {RenderStatus}
     */
    getStatus(): any;
    /**
     * @param {RenderStatus} value
     */
    setStatus(value: any): void;
    /**
     * @return {string}
     */
    getImageLocation(): string;
    /**
     * @param {string} value
     */
    setImageLocation(value: string): void;
    /**
     * @return {string}
     */
    getDomLocation(): string;
    /**
     * @param {string} value
     */
    setDomLocation(value: string): void;
    /**
     * @return {string}
     */
    getError(): string;
    /**
     * @param {string} value
     */
    setError(value: string): void;
    /**
     * @return {string}
     */
    getOS(): string;
    /**
     * @param {string} value
     */
    setOS(value: string): void;
    /**
     * @return {string}
     */
    getUserAgent(): string;
    /**
     * @param {string} value
     */
    setUserAgent(value: string): void;
    /**
     * @return {RectangleSize}
     */
    getDeviceSize(): import("../geometry/RectangleSize");
    /**
     * @param {RectangleSize} value
     */
    setDeviceSize(value: import("../geometry/RectangleSize")): void;
    /**
     * @return {Region[]}
     */
    getSelectorRegions(): import("../geometry/Region")[];
    /**
     * @param {Region[]} value
     */
    setSelectorRegions(value: import("../geometry/Region")[]): void;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @override
     */
    toString(): string;
}
