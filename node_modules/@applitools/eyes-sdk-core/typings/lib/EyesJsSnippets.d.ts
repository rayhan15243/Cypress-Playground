export const GET_VIEWPORT_SIZE: string;
export const GET_CONTENT_ENTIRE_SIZE: "\n  var scrollWidth = document.documentElement.scrollWidth;\n  var bodyScrollWidth = document.body.scrollWidth;\n  var totalWidth = Math.max(scrollWidth, bodyScrollWidth);\n  var clientHeight = document.documentElement.clientHeight;\n  var bodyClientHeight = document.body.clientHeight;\n  var scrollHeight = document.documentElement.scrollHeight;\n  var bodyScrollHeight = document.body.scrollHeight;\n  var maxDocElementHeight = Math.max(clientHeight, scrollHeight);\n  var maxBodyHeight = Math.max(bodyClientHeight, bodyScrollHeight);\n  var totalHeight = Math.max(maxDocElementHeight, maxBodyHeight);\n  return [totalWidth, totalHeight];\n";
export const GET_ELEMENT_ENTIRE_SIZE: "\n  var element = arguments[0];\n  return [\n    Math.max(element.clientWidth, element.scrollWidth),\n    Math.max(element.clientHeight, element.scrollHeight)\n  ];\n";
export const GET_ELEMENT_RECT: string;
export const GET_ELEMENT_CLIENT_RECT: string;
export const GET_ELEMENT_CSS_PROPERTIES: "\n  var properties = arguments[0];\n  var element = arguments[1];\n  var computedStyle = window.getComputedStyle(element, null);\n  return computedStyle\n    ? properties.map(function(property) { return computedStyle.getPropertyValue(property); })\n    : [];\n";
export const GET_ELEMENT_PROPERTIES: "\n  var properties = arguments[0];\n  var element = arguments[1];\n  return properties.map(function(property) { return element[property]; });\n";
export const GET_INNER_OFFSETS: string;
export const GET_SCROLL_POSITION: "\n  var element = arguments[0];\n  if (element) return [element.scrollLeft, element.scrollTop];\n  else {\n    var doc = document.documentElement;\n    return [\n      window.scrollX || ((window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0)),\n      window.scrollY || ((window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0))\n    ];\n  }\n";
export const SCROLL_TO: "\n  var offset = arguments[0];\n  var element = arguments[1] || document.documentElement;\n  if (element.scrollTo) {\n    element.scrollTo(offset.x, offset.y);\n  } else {\n    element.scrollTop = offset.x;\n    element.scrollLeft = offset.y;\n  }\n  return [element.scrollLeft, element.scrollTop];\n";
export const GET_TRANSFORMS: string;
export function SET_TRANSFORMS(transforms: any): string;
export function TRANSLATE_TO(x: any, y: any): string;
export const IS_SCROLLABLE: "\n  var element = arguments[0] || document.documentElement;\n  return element.scrollWidth > element.clientWidth || element.scrollHeight > element.clientHeight\n";
export const MARK_SCROLL_ROOT_ELEMENT: "\n  var element =  arguments[0] || document.documentElement;\n  element.setAttribute(\"data-applitools-scroll\", \"true\");\n";
export const GET_OVERFLOW: "\n  var el = arguments[0];\n  return el.style.overflow;\n";
export function SET_OVERFLOW_AND_RETURN_ORIGIN_VALUE(overflow: any): string;
export const BLUR_ELEMENT: "\n  var activeElement = arguments[0] || document.activeElement;\n  if (activeElement) activeElement.blur();\n  return activeElement;\n";
export const FOCUS_ELEMENT: "\n  var activeElement = arguments[0];\n  if (activeElement) activeElement.focus();\n";
export const GET_ELEMENT_XPATH: string;
export const GET_ELEMENT_ABSOLUTE_XPATH: string;
export const GET_CURRENT_CONTEXT_INFO: string;
export const GET_FRAME_BY_NAME_OR_ID: "\n  var nameOrId = arguments[0];\n  try {\n    return document.querySelector('iframe[name=\"' + nameOrId + '\"],iframe#' + nameOrId);\n  } catch (err) {\n    return null;\n  }\n";
export const GET_FRAMES: "\n  var frames = document.querySelectorAll('frame, iframe');\n  return Array.prototype.map.call(frames, function(frameElement) {\n    return {\n      isCORS: !frameElement.contentDocument,\n      element: frameElement,\n      src: frameElement.src\n    };\n  });\n";
export const GET_DOCUMENT_ELEMENT: "\n  return document.documentElement\n";
