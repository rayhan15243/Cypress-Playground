export = TestResults;
/**
 * @typedef SessionAccessibilityStatus
 * @prop {AccessibilityLevel} level - accessibility level.
 * @prop {AccessibilityGuidelinesVersion} version - accessibility guidelines version.
 * @prop {AccessibilityStatus} status - test accessibility status.
 */
/**
 * Eyes test results.
 */
declare class TestResults {
    /**
     * @param results
     * @param {string} [results.id]
     * @param {string} [results.name]
     * @param {string} [results.secretToken]
     * @param {TestResultsStatus} [results.status]
     * @param {string} [results.appName]
     * @param {string} [results.batchName]
     * @param {string} [results.batchId]
     * @param {string} [results.branchName]
     * @param {string} [results.hostOS]
     * @param {string} [results.hostApp]
     * @param {RectangleSize|object} [results.hostDisplaySize]
     * @param {SessionAccessibilityStatus} [results.accessibilityStatus]
     * @param {Date|string} [results.startedAt]
     * @param {number} [results.duration]
     * @param {boolean} [results.isNew]
     * @param {boolean} [results.isDifferent]
     * @param {boolean} [results.isAborted]
     * @param {SessionUrls|object} [results.appUrls]
     * @param {SessionUrls|object} [results.apiUrls]
     * @param {StepInfo[]|object[]} [results.stepsInfo]
     * @param {number} [results.steps]
     * @param {number} [results.matches]
     * @param {number} [results.mismatches]
     * @param {number} [results.missing]
     * @param {number} [results.exactMatches]
     * @param {number} [results.strictMatches]
     * @param {number} [results.contentMatches]
     * @param {number} [results.layoutMatches]
     * @param {number} [results.noneMatches]
     * @param {string} [results.url]
     */
    constructor({ id, name, secretToken, status, appName, batchName, batchId, branchName, hostOS, hostApp, hostDisplaySize, startedAt, duration, isNew, isDifferent, isAborted, appUrls, apiUrls, stepsInfo, steps, matches, mismatches, missing, exactMatches, strictMatches, contentMatches, layoutMatches, noneMatches, url, accessibilityStatus, }?: {
        id: any;
        name: any;
        secretToken: any;
        status: any;
        appName: any;
        batchName: any;
        batchId: any;
        branchName: any;
        hostOS: any;
        hostApp: any;
        hostDisplaySize: any;
        startedAt: any;
        duration: any;
        isNew: any;
        isDifferent: any;
        isAborted: any;
        appUrls: any;
        apiUrls: any;
        stepsInfo: any;
        steps: any;
        matches: any;
        mismatches: any;
        missing: any;
        exactMatches: any;
        strictMatches: any;
        contentMatches: any;
        layoutMatches: any;
        noneMatches: any;
        url: any;
        accessibilityStatus: any;
    });
    _id: any;
    _name: any;
    _secretToken: any;
    _status: any;
    _appName: any;
    _batchName: any;
    _batchId: any;
    _branchName: any;
    _hostOS: any;
    _hostApp: any;
    _hostDisplaySize: any;
    _startedAt: any;
    _duration: any;
    _isNew: any;
    _isDifferent: any;
    _isAborted: any;
    _appUrls: any;
    _apiUrls: any;
    _stepsInfo: any;
    _steps: any;
    _matches: any;
    _mismatches: any;
    _missing: any;
    _exactMatches: any;
    _strictMatches: any;
    _contentMatches: any;
    _layoutMatches: any;
    _noneMatches: any;
    _url: any;
    _accessibilityStatus: any;
    /** @type {ServerConnector} */
    _serverConnector: any;
    /**
     * @return {string}
     */
    getId(): string;
    /**
     * @param {string} value
     */
    setId(value: string): void;
    /**
     * @return {string}
     */
    getName(): string;
    /**
     * @param {string} value
     */
    setName(value: string): void;
    /**
     * @return {string}
     */
    getSecretToken(): string;
    /**
     * @param {string} value
     */
    setSecretToken(value: string): void;
    /**
     * @return {TestResultsStatus}
     */
    getStatus(): TestResultsStatus;
    /**
     * @param {TestResultsStatus} value
     */
    setStatus(value: TestResultsStatus): void;
    /**
     * @return {string}
     */
    getAppName(): string;
    /**
     * @param {string} value
     */
    setAppName(value: string): void;
    /**
     * @return {string}
     */
    getBatchName(): string;
    /**
     * @param {string} value
     */
    setBatchName(value: string): void;
    /**
     * @return {string}
     */
    getBatchId(): string;
    /**
     * @param {string} value
     */
    setBatchId(value: string): void;
    /**
     * @return {string}
     */
    getBranchName(): string;
    /**
     * @param {string} value
     */
    setBranchName(value: string): void;
    /**
     * @return {string}
     */
    getHostOS(): string;
    /**
     * @param {string} value
     */
    setHostOS(value: string): void;
    /**
     * @return {string}
     */
    getHostApp(): string;
    /**
     * @param {string} value
     */
    setHostApp(value: string): void;
    /**
     * @return {RectangleSize}
     */
    getHostDisplaySize(): import("./geometry/RectangleSize");
    /**
     * @param {RectangleSize} value
     */
    setHostDisplaySize(value: import("./geometry/RectangleSize")): void;
    /**
     * @return {SessionAccessibilityStatus}
     */
    getAccessibilityStatus(): SessionAccessibilityStatus;
    /**
     * @param {SessionAccessibilityStatus} value
     */
    setAccessibilityStatus(value: SessionAccessibilityStatus): void;
    /**
     * @return {Date}
     */
    getStartedAt(): Date;
    /**
     * @param {Date} value
     */
    setStartedAt(value: Date): void;
    /**
     * @return {number}
     */
    getDuration(): number;
    /**
     * @param {number} value
     */
    setDuration(value: number): void;
    /**
     * @return {boolean} - Whether or not this is a new test.
     */
    getIsNew(): boolean;
    /**
     * @param {boolean} value - Whether or not this test has an existing baseline.
     */
    setIsNew(value: boolean): void;
    /**
     * @return {boolean}
     */
    getIsDifferent(): boolean;
    /**
     * @param {boolean} value
     */
    setIsDifferent(value: boolean): void;
    /**
     * @return {boolean}
     */
    getIsAborted(): boolean;
    /**
     * @param {boolean} value
     */
    setIsAborted(value: boolean): void;
    /**
     * @return {SessionUrls}
     */
    getAppUrls(): SessionUrls;
    /**
     * @param {SessionUrls} value
     */
    setAppUrls(value: SessionUrls): void;
    /**
     * @return {SessionUrls}
     */
    getApiUrls(): SessionUrls;
    /**
     * @param {SessionUrls} value
     */
    setApiUrls(value: SessionUrls): void;
    /**
     * @return {StepInfo[]}
     */
    getStepsInfo(): StepInfo[];
    /**
     * @param {StepInfo[]} value
     */
    setStepsInfo(value: StepInfo[]): void;
    /**
     * @return {number} - The total number of test steps.
     */
    getSteps(): number;
    /**
     * @param {number} value - The number of visual checkpoints in the test.
     */
    setSteps(value: number): void;
    /**
     * @return {number} - The total number of test steps that matched the baseline.
     */
    getMatches(): number;
    /**
     * @param {number} value - The number of visual matches in the test.
     */
    setMatches(value: number): void;
    /**
     * @return {number} - The total number of test steps that did not match the baseline.
     */
    getMismatches(): number;
    /**
     * @param {number} value - The number of mismatches in the test.
     */
    setMismatches(value: number): void;
    /**
     * @return {number} - The total number of baseline test steps that were missing in the test.
     */
    getMissing(): number;
    /**
     * @param {number} value - The number of visual checkpoints that were available in the baseline but were not found
     *   in the current test.
     */
    setMissing(value: number): void;
    /**
     * @return {number} - The total number of test steps that exactly matched the baseline.
     */
    getExactMatches(): number;
    /**
     * @param {number} value - The number of matches performed with match level set to {@link MatchLevel#Exact}
     */
    setExactMatches(value: number): void;
    /**
     * @return {number} - The total number of test steps that strictly matched the baseline.
     */
    getStrictMatches(): number;
    /**
     * @param {number} value - The number of matches performed with match level set to {@link MatchLevel#Strict}
     */
    setStrictMatches(value: number): void;
    /**
     * @return {number} - The total number of test steps that matched the baseline by content.
     */
    getContentMatches(): number;
    /**
     * @param {number} value - The number of matches performed with match level set to {@link MatchLevel#Content}
     */
    setContentMatches(value: number): void;
    /**
     * @return {number} - The total number of test steps that matched the baseline by layout.
     */
    getLayoutMatches(): number;
    /**
     * @param {number} value - The number of matches performed with match level set to {@link MatchLevel#Layout}
     */
    setLayoutMatches(value: number): void;
    /**
     * @return {number} - The total number of test steps that matched the baseline without performing any comparison.
     */
    getNoneMatches(): number;
    /**
     * @param {number} value - The number of matches performed with match level set to {@link MatchLevel#None}
     */
    setNoneMatches(value: number): void;
    /**
     * @return {string} - The URL where test results can be viewed.
     */
    getUrl(): string;
    /**
     * @param {string} value - The URL of the test results.
     */
    setUrl(value: string): void;
    /**
     * @return {boolean} - Whether or not this test passed.
     */
    isPassed(): boolean;
    /**
     * @param {ServerConnector} serverConnector
     */
    setServerConnector(serverConnector: any): void;
    /**
     * @return {Promise}
     */
    deleteSession(): Promise<any>;
    /**
     * @override
     */
    toJSON(): any;
    /**
     * @override
     */
    toString(): string;
}
declare namespace TestResults {
    export { TestResultsStatus, SessionAccessibilityStatus };
}
type TestResultsStatus = string;
type SessionAccessibilityStatus = {
    /**
     * - accessibility level.
     */
    level: any;
    /**
     * - accessibility guidelines version.
     */
    version: any;
    /**
     * - test accessibility status.
     */
    status: any;
};
/**
 * @typedef {import('./TestResultsStatus').TestResultsStatus} TestResultsStatus
 */
declare class SessionUrls {
    /**
     * @param data
     * @param {string} data.batch
     * @param {string} data.session
     */
    constructor({ batch, session }?: {
        batch: any;
        session: any;
    });
    _batch: any;
    _session: any;
    /**
     * @return {string}
     */
    getBatch(): string;
    /**
     * @param {string} value
     */
    setBatch(value: string): void;
    /**
     * @return {string}
     */
    getSession(): string;
    /**
     * @param {string} value
     */
    setSession(value: string): void;
    /**
     * @override
     */
    toJSON(): any;
}
declare class StepInfo {
    /**
     * @param info
     * @param {string} info.name
     * @param {boolean} info.isDifferent
     * @param {boolean} info.hasBaselineImage
     * @param {boolean} info.hasCurrentImage
     * @param {AppUrls|object} info.appUrls
     * @param {ApiUrls|object} info.apiUrls
     * @param {string[]} [info.renderId]
     */
    constructor({ name, isDifferent, hasBaselineImage, hasCurrentImage, appUrls, apiUrls, renderId, }?: {
        name: any;
        isDifferent: any;
        hasBaselineImage: any;
        hasCurrentImage: any;
        appUrls: any;
        apiUrls: any;
        renderId: any;
    });
    _name: any;
    _isDifferent: any;
    _hasBaselineImage: any;
    _hasCurrentImage: any;
    _appUrls: any;
    _apiUrls: any;
    _renderId: any;
    /**
     * @return {string}
     */
    getName(): string;
    /**
     * @param {string} value
     */
    setName(value: string): void;
    /**
     * @return {boolean}
     */
    getIsDifferent(): boolean;
    /**
     * @param {boolean} value
     */
    setIsDifferent(value: boolean): void;
    /**
     * @return {boolean}
     */
    getHasBaselineImage(): boolean;
    /**
     * @param {boolean} value
     */
    setHasBaselineImage(value: boolean): void;
    /**
     * @return {boolean}
     */
    getHasCurrentImage(): boolean;
    /**
     * @param {boolean} value
     */
    setHasCurrentImage(value: boolean): void;
    /**
     * @return {AppUrls}
     */
    getAppUrls(): AppUrls;
    /**
     * @param {AppUrls} value
     */
    setAppUrls(value: AppUrls): void;
    /**
     * @return {ApiUrls}
     */
    getApiUrls(): ApiUrls;
    /**
     * @param {ApiUrls} value
     */
    setApiUrls(value: ApiUrls): void;
    /**
     * @return {string} value
     */
    getRenderId(): string;
    /**
     * @param {string} value
     */
    setRenderId(value: string): void;
    /**
     * @override
     */
    toJSON(): any;
}
declare class AppUrls {
    /**
     * @param data
     * @param {string} data.step
     * @param {string} data.stepEditor
     */
    constructor({ step, stepEditor }?: {
        step: any;
        stepEditor: any;
    });
    _step: any;
    _stepEditor: any;
    /**
     * @return {string}
     */
    getStep(): string;
    /**
     * @param {string} value
     */
    setStep(value: string): void;
    /**
     * @return {string}
     */
    getStepEditor(): string;
    /**
     * @param {string} value
     */
    setStepEditor(value: string): void;
    /**
     * @override
     */
    toJSON(): any;
}
declare class ApiUrls {
    /**
     * @param data
     * @param {string} data.baselineImage
     * @param {string} data.currentImage
     * @param {string} data.checkpointImage
     * @param {string} data.checkpointImageThumbnail
     * @param {string} data.diffImage
     */
    constructor({ baselineImage, currentImage, checkpointImage, checkpointImageThumbnail, diffImage, }?: {
        baselineImage: any;
        currentImage: any;
        checkpointImage: any;
        checkpointImageThumbnail: any;
        diffImage: any;
    });
    _baselineImage: any;
    _currentImage: any;
    _checkpointImage: any;
    _checkpointImageThumbnail: any;
    _diffImage: any;
    /**
     * @return {string}
     */
    getBaselineImage(): string;
    /**
     * @param {string} value
     */
    setBaselineImage(value: string): void;
    /**
     * @return {string}
     */
    getCurrentImage(): string;
    /**
     * @param {string} value
     */
    setCurrentImage(value: string): void;
    /**
     * @return {string}
     */
    getCheckpointImage(): string;
    /**
     * @param {string} value
     */
    setCheckpointImage(value: string): void;
    /**
     * @return {string}
     */
    getCheckpointImageThumbnail(): string;
    /**
     * @param {string} value
     */
    setCheckpointImageThumbnail(value: string): void;
    /**
     * @return {string}
     */
    getDiffImage(): string;
    /**
     * @param {string} value
     */
    setDiffImage(value: string): void;
    /**
     * @override
     */
    toJSON(): any;
}
