export = Region;
/**
 * A Region in a two-dimensional plane.
 */
declare class Region {
    /**
     * @param {object} object
     * @return {boolean}
     */
    static isRegionCompatible(object: object): boolean;
    /**
     * Creates a Region instance.
     * @param {Region|RegionObject|Location|number} varArg1 - The Region (or object) to clone from, the Location of new region or the left offset of new region.
     * @param {RectangleSize|number} [varArg2] - The Region size or the top offset of new region.
     * @param {CoordinatesType|number} [varArg3] - The width of new region.
     * @param {number} [varArg4] - The height of new region.
     * @param {CoordinatesType} [varArg5] - The coordinatesType of new region (protected argument).
     */
    constructor(varArg1: Region | RegionObject | Location | number, varArg2?: import("./RectangleSize") | number, varArg3?: CoordinatesType | number, varArg4?: number, varArg5?: CoordinatesType, ...args: any[]);
    _error: any;
    _left: any;
    _top: any;
    _width: any;
    _height: any;
    _coordinatesType: any;
    /**
     * @return {number} - The region's left offset.
     */
    getLeft(): number;
    /**
     * @param {number} value
     */
    setLeft(value: number): void;
    /**
     * @return {number} - The region's top offset.
     */
    getTop(): number;
    /**
     * @param {number} value
     */
    setTop(value: number): void;
    /**
     * @return {number} - The region's right offset.
     */
    getRight(): number;
    /**
     * @return {number} - The region's bottom offset.
     */
    getBottom(): number;
    /**
     * @return {number} - The region's width.
     */
    getWidth(): number;
    /**
     * @param {number} value
     */
    setWidth(value: number): void;
    /**
     * @return {number} - The region's height.
     */
    getHeight(): number;
    /**
     * @param {number} value
     */
    setHeight(value: number): void;
    /**
     * @return {CoordinatesType} - The region's coordinatesType.
     */
    getCoordinatesType(): CoordinatesType;
    /**
     * @param {CoordinatesType} value
     */
    setCoordinatesType(value: CoordinatesType): void;
    /**
     * @return {string}
     */
    getError(): string;
    /**
     * @param {string} value
     */
    setError(value: string): void;
    /**
     * @return {Location} - The (top,left) position of the current region.
     */
    getLocation(): Location;
    /**
     * Set the (top,left) position of the current region
     *
     * @param {Location} location - The (top,left) position to set.
     */
    setLocation(location: Location): void;
    /**
     * @return {RectangleSize} - The size of the region.
     */
    getSize(): import("./RectangleSize");
    /**
     * Set the (width,height) size of the current region
     *
     * @param {RectangleSize} size - The updated size of the region.
     */
    setSize(size: import("./RectangleSize")): void;
    /**
     * Indicates whether some other Region is "equal to" this one.
     *
     * @param {object|Region} obj - The reference object with which to compare.
     * @return {boolean} - A {@code true} if this object is the same as the obj argument; {@code false} otherwise.
     */
    equals(obj: object | Region): boolean;
    /**
     * @return {boolean} - A {@code true} if the region is empty; {@code false} otherwise.
     */
    isEmpty(): boolean;
    /**
     * @return {boolean} - A {@code true} if the region's size is 0, false otherwise.
     */
    isSizeEmpty(): boolean;
    /**
     * Get a Region translated by the specified amount.
     *
     * @param {number} dx - The amount to offset the x-coordinate.
     * @param {number} dy - The amount to offset the y-coordinate.
     * @return {Region} - A region with an offset location.
     */
    offset(dx: number, dy: number): Region;
    /**
     * @return {Location}
     */
    getMiddleOffset(): Location;
    /**
     * Get a region which is a scaled version of the current region.
     * IMPORTANT: This also scales the LOCATION(!!) of the region (not just its size).
     *
     * @param {number} scaleRatio - The ratio by which to scale the results.
     * @return {Region} - A new region which is a scaled version of the current region.
     */
    scale(scaleRatio: number): Region;
    /**
     * Returns a list of sub-regions which compose the current region.
     *
     * @param {RectangleSize} subRegionSize - The default sub-region size to use.
     * @param {boolean} [isFixedSize=false] - If {@code false}, then sub-regions might have a size which is smaller then
     *   {@code subRegionSize} (thus there will be no overlap of regions). Otherwise, all sub-regions will have the same
     * @param {number} [scrollDownAmmount=0] - If exists (double overlap) then each non-top region is scrolled up (page down)
     *   by this ammount; this is under the assumption that this mmount should be removed from the top of images.
     * @return {Region[]} - The sub-regions composing the current region. If {@code subRegionSize} is equal or
     *   greater than the current region, only a single region is returned.
     */
    getSubRegions(subRegionSize: import("./RectangleSize"), isFixedSize?: boolean, scrollDownAmmount?: number): Region[];
    /**
     * Check if a specified region is contained within the another region or location.
     *
     * @param {Region|Location} locationOrRegion - The region or location to check if it is contained within the current
     *   region.
     * @return {boolean} - True if the region is contained within given object, false otherwise.
     */
    contains(locationOrRegion: Region | Location): boolean;
    /**
     * Check if a region is intersected with the current region.
     *
     * @param {Region} other - The region to check intersection with.
     * @return {boolean} - True if the regions are intersected, false otherwise.
     */
    isIntersected(other: Region): boolean;
    /**
     * Replaces this region with the intersection of itself and {@code other}
     *
     * @param {Region} other - The region with which to intersect.
     */
    intersect(other: Region): void;
    /**
     * @protected
     */
    protected makeEmpty(): void;
    /**
     * @override
     */
    toJSON(): {
        error: any;
        left?: undefined;
        top?: undefined;
        width?: undefined;
        height?: undefined;
        coordinatesType?: undefined;
    } | {
        left: any;
        top: any;
        width: any;
        height: any;
        coordinatesType: any;
        error?: undefined;
    };
    toPersistedRegions(_driver: any): Promise<{
        left: any;
        top: any;
        width: any;
        height: any;
    }[]>;
    /**
     * @override
     */
    toString(): string;
}
declare namespace Region {
    export { EMPTY, CoordinatesType, RegionObject };
}
type CoordinatesType = string;
declare const Location: typeof import("./Location");
type RegionObject = {
    left: number;
    top: number;
    width: number;
    height: number;
    coordinatesType: CoordinatesType | undefined;
};
declare var EMPTY: Region;
