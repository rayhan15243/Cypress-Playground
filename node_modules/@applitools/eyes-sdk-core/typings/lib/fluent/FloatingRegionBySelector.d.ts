export = FloatingRegionBySelector;
declare const FloatingRegionBySelector_base: typeof import("./GetFloatingRegion");
/**
 * @typedef {import('../config/AccessibilityRegionType').AccessibilityRegionType} AccessibilityRegionType
 * @typedef {import('../wrappers/EyesWrappedElement').EyesSelector} EyesSelector
 * @typedef {import('../EyesClassic')} EyesClassic
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('../wrappers/EyesWrappedDriver')<TDriver, TElement, TSelector>} EyesWrappedDriver
 */
/**
 * @typedef {EyesSelector & {maxUpOffset: number, maxDownOffset: number, maxLeftOffset: number, maxRightOffset: number}} FloatingPersistedRegion
 */
/**
 * @internal
 * @template TSelector
 */
declare class FloatingRegionBySelector<TSelector> extends FloatingRegionBySelector_base {
    /**
     * @param {TSelector} regionSelector
     * @param {number} maxUpOffset
     * @param {number} maxDownOffset
     * @param {number} maxLeftOffset
     * @param {number} maxRightOffset
     */
    constructor(regionSelector: TSelector, maxUpOffset: number, maxDownOffset: number, maxLeftOffset: number, maxRightOffset: number);
    _selector: TSelector;
    _maxUpOffset: number;
    _maxDownOffset: number;
    _maxLeftOffset: number;
    _maxRightOffset: number;
    /**
     * @template TDriver, TElement
     * @param {EyesWrappedDriver<TDriver, TElement, TSelector>} driver
     * @return {Promise<FloatingPersistedRegion[]>}
     */
    toPersistedRegions<TDriver, TElement>(driver: import("../wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>): Promise<FloatingPersistedRegion[]>;
}
declare namespace FloatingRegionBySelector {
    export { AccessibilityRegionType, EyesSelector, EyesClassic, EyesWrappedDriver, FloatingPersistedRegion };
}
type FloatingPersistedRegion = import("../wrappers/EyesWrappedElement").EyesSelector & {
    maxUpOffset: number;
    maxDownOffset: number;
    maxLeftOffset: number;
    maxRightOffset: number;
};
type AccessibilityRegionType = "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
type EyesSelector = {
    type: "css" | "xpath";
    selector: string;
};
type EyesClassic = import("../EyesClassic")<any, any, any>;
type EyesWrappedDriver<TDriver, TElement, TSelector> = import("../wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>;
