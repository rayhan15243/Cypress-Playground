export = CheckSettings;
/**
 * The Match settings object to use in the various Eyes.Check methods.
 */
declare class CheckSettings {
    /**
     * @param {?number} [timeout=-1]
     * @param {Region|RegionObject} [region]
     */
    constructor(timeout?: number | null, region?: import("../geometry/Region") | any);
    /** @type {boolean} */
    _sendDom: boolean;
    /** @type {MatchLevel} */
    _matchLevel: any;
    /** @type {AccessibilityLevel} */
    _accessibilityLevel: any;
    /** @type {boolean} */
    _useDom: boolean;
    /** @type {boolean} */
    _enablePatterns: boolean;
    /** @type {boolean} */
    _ignoreDisplacements: boolean;
    /** @type {boolean} */
    _ignoreCaret: boolean;
    /** @type {boolean} */
    _stitchContent: boolean;
    /** @type {string} */
    _renderId: string;
    _timeout: number;
    _targetRegion: import("../geometry/Region");
    _ignoreRegions: any[];
    _layoutRegions: any[];
    _strictRegions: any[];
    _contentRegions: any[];
    _floatingRegions: any[];
    _accessibilityRegions: any[];
    /**
     * A setter for the checkpoint name.
     *
     * @param {string} name - A name by which to identify the checkpoint.
     * @return {this} - This instance of the settings object.
     */
    withName(name: string): this;
    _name: string;
    /**
     * @ignore
     * @return {string}
     */
    getName(): string;
    /**
     * Defines whether to send the document DOM or not.
     *
     * @param {boolean} [sendDom=true] - When {@code true} sends the DOM to the server (the default).
     * @return {this} - This instance of the settings object.
     */
    sendDom(sendDom?: boolean): this;
    /**
     * @ignore
     * @return {boolean}
     */
    getSendDom(): boolean;
    /**
     * Set the render ID of the screenshot.
     *
     * @package
     * @param {string} renderId - The render ID to use.
     * @return {this} - This instance of the settings object.
     */
    renderId(renderId: string): this;
    /**
     * @ignore
     * @return {string}
     */
    getRenderId(): string;
    /**
     * Shortcut to set the match level to {@code MatchLevel.LAYOUT}.
     *
     * @return {this} - This instance of the settings object.
     */
    layout(): this;
    /**
     * Shortcut to set the match level to {@code MatchLevel.EXACT}.
     *
     * @return {this} - This instance of the settings object.
     */
    exact(): this;
    /**
     * Shortcut to set the match level to {@code MatchLevel.STRICT}.
     *
     * @return {this} - This instance of the settings object.
     */
    strict(): this;
    /**
     * Shortcut to set the match level to {@code MatchLevel.CONTENT}.
     *
     * @return {this} - This instance of the settings object.
     */
    content(): this;
    /**
     * Set the match level by which to compare the screenshot.
     *
     * @param {MatchLevel} matchLevel - The match level to use.
     * @return {this} - This instance of the settings object.
     */
    matchLevel(matchLevel: any): this;
    /**
     * @ignore
     * @return {MatchLevel}
     */
    getMatchLevel(): any;
    /**
     * Defines if to detect and ignore a blinking caret in the screenshot.
     *
     * @param {boolean} [ignoreCaret=true] - Whether or not to detect and ignore a blinking caret in the screenshot.
     * @return {this} - This instance of the settings object.
     */
    ignoreCaret(ignoreCaret?: boolean): this;
    /**
     * @ignore
     * @return {boolean}
     */
    getIgnoreCaret(): boolean;
    /**
     * Defines that the screenshot will contain the entire element or region, even if it's outside the view.
     *
     * @param {boolean} [fully=true]
     * @return {this} - This instance of the settings object.
     */
    fully(fully?: boolean): this;
    /**
     * @param {boolean} [stitchContent=true]
     * @return {this}
     */
    stitchContent(stitchContent?: boolean): this;
    /**
     * @ignore
     * @return {boolean}
     */
    getStitchContent(): boolean;
    /**
     * Defines useDom for enabling the match algorithm to use dom.
     *
     * @param {boolean} [useDom=true]
     * @return {this} - This instance of the settings object.
     */
    useDom(useDom?: boolean): this;
    /**
     * @ignore
     * @return {boolean}
     */
    getUseDom(): boolean;
    /**
     * Enabling the match algorithms for pattern detection
     *
     * @param {boolean} [enablePatterns=true]
     * @return {this} - This instance of the settings object.
     */
    enablePatterns(enablePatterns?: boolean): this;
    /**
     * @ignore
     * @return {boolean}
     */
    getEnablePatterns(): boolean;
    /**
     * @param {boolean} [ignoreDisplacements=true]
     * @return {this} - This instance of the settings object.
     */
    ignoreDisplacements(ignoreDisplacements?: boolean): this;
    /**
     * @ignore
     * @return {boolean}
     */
    getIgnoreDisplacements(): boolean;
    /**
     * Defines the timeout to use when acquiring and comparing screenshots.
     *
     * @param {number} timeoutMilliseconds - The timeout to use in milliseconds.
     * @return {this} - This instance of the settings object.
     */
    timeout(timeoutMilliseconds?: number): this;
    /**
     * @ignore
     * @return {number}
     */
    getTimeout(): number;
    /**
     * @protected
     * @param {Region|RegionObject} region
     */
    protected updateTargetRegion(region: import("../geometry/Region") | any): void;
    /**
     * @ignore
     * @return {Region}
     */
    getTargetRegion(): import("../geometry/Region");
    /**
     * @protected
     * @param {GetRegion|Region|RegionObject} region
     * @return {GetRegion}
     */
    protected _regionToRegionProvider(region: import("./GetRegion") | import("../geometry/Region") | any): import("./GetRegion");
    _getTargetType(): "window" | "region";
    /**
     * Adds a region to ignore.
     *
     * @override
     * @param {GetRegion|Region|By|String|EyesWebElement|Object} region The region or region container to ignore when validating the screenshot.
     * @return {CheckSettings} This instance of the settings object.
     */
    ignore(region: import("./GetRegion") | import("../geometry/Region") | any | string | any | any): CheckSettings;
    /**
     * Adds a region to ignore.
     *
     * @override
     * @param {GetRegion|Region|By|String|EyesWebElement|Object} region The region or region container to ignore when validating the screenshot.
     * @return {CheckSettings} This instance of the settings object.
     */
    ignoreRegion(region: import("./GetRegion") | import("../geometry/Region") | any | string | any | any): CheckSettings;
    /**
     * Adds one or more ignore regions.
     *
     * @param {...(GetRegion|Region)} regions - A region to ignore when validating the screenshot.
     * @return {this} - This instance of the settings object.
     */
    ignores(...regions: (import("./GetRegion") | import("../geometry/Region"))[]): this;
    /**
     * Adds one or more ignore regions.
     *
     * @param {...(GetRegion|Region)} regions - A region to ignore when validating the screenshot.
     * @return {this} - This instance of the settings object.
     */
    ignoreRegions(...regions: (import("./GetRegion") | import("../geometry/Region"))[]): this;
    /**
     * Adds a layout region.
     * @param {GetRegion|Region} region - A region to match using the Layout method.
     * @return {this} - This instance of the settings object.
     */
    layoutRegion(region: import("./GetRegion") | import("../geometry/Region")): this;
    /**
     * Adds one or more layout regions.
     * @param {...(GetRegion|Region)} regions - A region to match using the Layout method.
     * @return {this} - This instance of the settings object.
     */
    layoutRegions(...regions: (import("./GetRegion") | import("../geometry/Region"))[]): this;
    /**
     * Adds a strict regions.
     * @param {GetRegion|Region} region - A region to match using the Strict method.
     * @return {this} - This instance of the settings object.
     */
    strictRegion(region: import("./GetRegion") | import("../geometry/Region")): this;
    /**
     * Adds one or more strict regions.
     * @param {...(GetRegion|Region)} regions - A region to match using the Strict method.
     * @return {this} - This instance of the settings object.
     */
    strictRegions(...regions: (import("./GetRegion") | import("../geometry/Region"))[]): this;
    /**
     * Adds a content region.
     * @param {GetRegion|Region} region - A region to match using the Content method.
     * @return {this} - This instance of the settings object.
     */
    contentRegion(region: import("./GetRegion") | import("../geometry/Region")): this;
    /**
     * Adds one or more content regions.
     * @param {...(GetRegion|Region)} regions - A region to match using the Content method.
     * @return {this} - This instance of the settings object.
     */
    contentRegions(...regions: (import("./GetRegion") | import("../geometry/Region"))[]): this;
    /**
     * Adds a floating region. A floating region is a a region that can be placed within the boundaries of a bigger
     * region.
     *
     * @param {GetFloatingRegion|Region|FloatingMatchSettings} region - The content rectangle or region
     *   container
     * @param {number} [maxUpOffset] - How much the content can move up.
     * @param {number} [maxDownOffset] - How much the content can move down.
     * @param {number} [maxLeftOffset] - How much the content can move to the left.
     * @param {number} [maxRightOffset] - How much the content can move to the right.
     * @return {this} - This instance of the settings object.
     */
    floating(region: import("./GetFloatingRegion") | import("../geometry/Region") | import("../config/FloatingMatchSettings"), maxUpOffset?: number, maxDownOffset?: number, maxLeftOffset?: number, maxRightOffset?: number): this;
    /**
     * Adds a floating region. A floating region is a a region that can be placed within the boundaries of a bigger
     * region.
     *
     * @param {GetFloatingRegion|Region|FloatingMatchSettings} region - The content rectangle or region
     *   container
     * @param {number} [maxUpOffset] - How much the content can move up.
     * @param {number} [maxDownOffset] - How much the content can move down.
     * @param {number} [maxLeftOffset] - How much the content can move to the left.
     * @param {number} [maxRightOffset] - How much the content can move to the right.
     * @return {this} - This instance of the settings object.
     */
    floatingRegion(region: import("./GetFloatingRegion") | import("../geometry/Region") | import("../config/FloatingMatchSettings"), maxUpOffset?: number, maxDownOffset?: number, maxLeftOffset?: number, maxRightOffset?: number): this;
    /**
     * Adds one or more floating regions. A floating region is a a region that can be placed within the boundaries of a
     * bigger region.
     *
     * @param {number} maxOffset - How much each of the content rectangles can move in any direction.
     * @param {...Region} regionsOrContainers - One or more content rectangles or region containers
     * @return {this} - This instance of the settings object.
     */
    floatings(maxOffset: number, ...regions: any[]): this;
    /**
     * Adds one or more floating regions. A floating region is a a region that can be placed within the boundaries of a
     * bigger region.
     *
     * @param {number} maxOffset - How much each of the content rectangles can move in any direction.
     * @param {...Region} regionsOrContainers - One or more content rectangles or region containers
     * @return {this} - This instance of the settings object.
     */
    floatingRegions(maxOffset: number, ...regions: any[]): this;
    /**
     * Adds an accessibility region. An accessibility region is a region that has an accessibility type.
     *
     * @param {GetAccessibilityRegion|Region|AccessibilityMatchSettings} region - The content rectangle or
     *   region container
     * @param {AccessibilityRegionType} regionType - Type of accessibility.
     * @return {this} - This instance of the settings object.
     */
    accessibilityRegion(region: import("./GetAccessibilityRegion") | import("../geometry/Region") | import("../config/AccessibilityMatchSettings"), regionType: any): this;
    accessibility(region: any, regionType: any): CheckSettings;
    /**
     * @ignore
     * @return {GetRegion[]}
     */
    getIgnoreRegions(): import("./GetRegion")[];
    /**
     * @ignore
     * @return {GetRegion[]}
     */
    getStrictRegions(): import("./GetRegion")[];
    /**
     * @ignore
     * @return {GetRegion[]}
     */
    getLayoutRegions(): import("./GetRegion")[];
    /**
     * @ignore
     * @return {GetRegion[]}
     */
    getContentRegions(): import("./GetRegion")[];
    /**
     * @ignore
     * @return {GetFloatingRegion[]}
     */
    getFloatingRegions(): import("./GetFloatingRegion")[];
    /**
     * @ignore
     * @return {GetAccessibilityRegion[]}
     */
    getAccessibilityRegions(): import("./GetAccessibilityRegion")[];
    /**
     * @override
     */
    toString(): string;
    toCheckWindowConfiguration(eyesWebDriver: any): Promise<{
        target: string;
        fully: boolean;
        tag: string;
        scriptHooks: any;
        sendDom: boolean;
        matchLevel: any;
        ignore: any[];
        floating: any[];
        strict: any[];
        layout: any[];
        content: any[];
        accessibility: any[];
    }>;
    _getPersistedRegions(eyesWebDriver: any): Promise<{
        ignore: any[];
        floating: any[];
        strict: any[];
        layout: any[];
        content: any[];
        accessibility: any[];
    }>;
}
