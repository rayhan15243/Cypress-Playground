export = AccessibilityRegionBySelector;
declare const AccessibilityRegionBySelector_base: typeof import("./GetAccessibilityRegion");
/**
 * @typedef {import('../config/AccessibilityRegionType').AccessibilityRegionType} AccessibilityRegionType
 * @typedef {import('../wrappers/EyesWrappedElement').EyesSelector} EyesSelector
 * @typedef {import('../EyesClassic')} EyesClassic
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('../wrappers/EyesWrappedDriver')<TDriver, TElement, TSelector>} EyesWrappedDriver
 */
/**
 * @typedef {EyesSelector & {accessibilityType: AccessibilityRegionType}} AccessibilityPersistedRegion
 */
/**
 * @internal
 * @template TSelector
 */
declare class AccessibilityRegionBySelector<TSelector> extends AccessibilityRegionBySelector_base {
    /**
     * @param {TSelector} selector
     * @param {AccessibilityRegionType} [type]
     */
    constructor(selector: TSelector, type?: AccessibilityRegionType);
    _selector: TSelector;
    _type: "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
    /**
     * @template TDriver, TElement
     * @param {EyesWrappedDriver<TDriver, TElement, TSelector>} driver
     * @return {Promise<AccessibilityPersistedRegion[]>}
     */
    toPersistedRegions<TDriver, TElement>(driver: import("../wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>): Promise<AccessibilityPersistedRegion[]>;
}
declare namespace AccessibilityRegionBySelector {
    export { AccessibilityRegionType, EyesSelector, EyesClassic, EyesWrappedDriver, AccessibilityPersistedRegion };
}
type AccessibilityPersistedRegion = import("../wrappers/EyesWrappedElement").EyesSelector & {
    accessibilityType: AccessibilityRegionType;
};
type AccessibilityRegionType = "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
type EyesSelector = {
    type: "css" | "xpath";
    selector: string;
};
type EyesClassic = import("../EyesClassic")<any, any, any>;
type EyesWrappedDriver<TDriver, TElement, TSelector> = import("../wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>;
