export = TargetRegionByElement;
declare const TargetRegionByElement_base: typeof import("./GetRegion");
/**
 * @typedef {import('../config/AccessibilityRegionType').AccessibilityRegionType} AccessibilityRegionType
 * @typedef {import('../wrappers/EyesWrappedElement').EyesSelector} EyesSelector
 * @typedef {import('../EyesClassic')} EyesClassic
 */
/**
 * @template TDriver, TElement, TSelector
 * @typedef {import('../wrappers/EyesWrappedDriver')<TDriver, TElement, TSelector>} EyesWrappedDriver
 */
/**
 * @template TElement, TSelector
 * @typedef {import('../wrappers/EyesWrappedElement')<any, TElement, TSelector>} EyesWrappedElement
 */
/**
 * @typedef {EyesSelector} TargetPersistedRegion
 */
/**
 * @internal
 * @template TElement
 * @template TSelector
 */
declare class TargetRegionByElement<TElement, TSelector> extends TargetRegionByElement_base {
    /**
     * @param {EyesWrappedElement<TElement, TSelector>} element
     */
    constructor(element: import("../wrappers/EyesWrappedElement")<any, TElement, TSelector>);
    _element: import("../wrappers/EyesWrappedElement")<any, TElement, TSelector>;
    /**
     * @template TDriver
     * @param {EyesWrappedDriver<TDriver, TElement, TSelector>} driver
     * @return {Promise<TargetPersistedRegion[]>}
     */
    toPersistedRegions<TDriver>(driver: import("../wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>): Promise<TargetPersistedRegion[]>;
}
declare namespace TargetRegionByElement {
    export { AccessibilityRegionType, EyesSelector, EyesClassic, EyesWrappedDriver, EyesWrappedElement, TargetPersistedRegion };
}
type TargetPersistedRegion = {
    type: "css" | "xpath";
    selector: string;
};
type AccessibilityRegionType = "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
type EyesSelector = {
    type: "css" | "xpath";
    selector: string;
};
type EyesClassic = import("../EyesClassic")<any, any, any>;
type EyesWrappedDriver<TDriver, TElement, TSelector> = import("../wrappers/EyesWrappedDriver")<TDriver, TElement, TSelector>;
type EyesWrappedElement<TElement, TSelector> = import("../wrappers/EyesWrappedElement")<any, TElement, TSelector>;
