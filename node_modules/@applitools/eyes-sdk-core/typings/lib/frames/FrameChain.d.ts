export = FrameChain;
/**
 * @typedef {import('../logging/Logger')} Logger
 * @typedef {import('../geometry/Location')} Location
 * @typedef {import('../geometry/RectangleSize')} RectangleSize
 */
declare class FrameChain {
    /**
     * Equality check for two frame chains
     * @param {FrameChain} leftFrameChain - frame chain to be compared
     * @param {FrameChain} rightFrameChain - frame chain to be compared
     * @return {Promise<boolean>} true if both objects represent the same frame chain, false otherwise
     */
    static equals(leftFrameChain: FrameChain, rightFrameChain: FrameChain): Promise<boolean>;
    /**
     * @param {Logger} logger - logger instance
     * @param {FrameChain} other - frame chain from which the current frame chain will be created
     */
    constructor(logger: Logger, other: FrameChain);
    _logger: import("../logging/Logger");
    _frames: any;
    /**
     * @return {number} number of frames in the chain
     */
    get size(): number;
    /**
     * @return {boolean} true if frame chain is empty, false otherwise
     */
    get isEmpty(): boolean;
    /**
     * @return {Frame} first frame context (the first frame in the chain)
     */
    get first(): any;
    /**
     * @return {Frame} current frame context (the last frame in the chain)
     */
    get current(): any;
    /**
     * @param {number} index - index of needed frame
     * @return {Frame} frame by index in array
     */
    frameAt(index: number): any;
    /**
     * Removes all frames in the frame chain
     */
    clear(): void;
    /**
     * @return {FrameChain} cloned frame chain
     */
    clone(): FrameChain;
    /**
     * Removes the last inserted frame element. Practically means we switched
     * back to the parent of the current frame
     * @return {?Frame} removed frame
     */
    pop(): any;
    /**
     * Appends a frame to the frame chain
     * @param {Frame} frame - frame to be added
     */
    push(frame: any): any;
    /**
     * @return {Location} location of the current frame in the page
     */
    getCurrentFrameOffset(): Location;
    /**
     * @return {Location} location of the current frame related to the viewport
     */
    getCurrentFrameLocationInViewport(): Location;
    /**
     * @return {RectangleSize} effective size of current frame
     */
    getCurrentFrameEffectiveSize(): RectangleSize;
    getCurrentFrameEffectiveRect(): import("../geometry/Region");
    [Symbol.iterator](): any;
}
declare namespace FrameChain {
    export { Logger, Location, RectangleSize };
}
declare const Location: typeof import("../geometry/Location");
declare const RectangleSize: typeof import("../geometry/RectangleSize");
type Logger = import("../logging/Logger");
type Location = import("../geometry/Location");
type RectangleSize = import("../geometry/RectangleSize");
