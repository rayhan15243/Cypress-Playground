export = DomCapture;
/**
 * @ignore
 */
declare class DomCapture {
    /**
     * @param {Logger} logger - A Logger instance.
     * @param {EyesWrappedDriver} driver
     * @param {PositionProvider} [positionProvider]
     * @param {DomCaptureReturnType} [returnType]
     * @param {string} [script]
     * @return {Promise<string|object>}
     */
    static getFullWindowDom(logger: any, driver: any, positionProvider?: any, returnType?: {
        OBJECT: string;
        STRING: string;
    }, script?: string): Promise<string | object>;
    /**
     * @param {Logger} logger
     * @param {EyesWrappedDriver} driver
     */
    constructor(logger: any, driver: any, script: any);
    _logger: any;
    _driver: any;
    _customScript: any;
    isInternetExplorer(): Promise<boolean>;
    isEdgeClassic(): Promise<boolean>;
    needsIEScript(): Promise<boolean>;
    /**
     * @return {Promise<string>}
     */
    getWindowDom(): Promise<string>;
    /**
     * @param {string} script
     * @param {string} url
     * @return {Promise<string>}
     */
    getFrameDom(script: string, url: string): Promise<string>;
    getLocation(): Promise<any>;
    /**
     * @param {string|string[]} xpaths
     * @return {Promise<number>}
     * @private
     */
    private _switchToFrame;
    /**
     * @private
     * @return {Promise<number>}
     */
    private _switchToParentFrame;
    /**
     * @param {string} baseUri
     * @param {string} href
     * @param {number} [retriesCount=1]
     * @return {Promise<{href: string, css: string}>}
     * @private
     */
    private _downloadCss;
    getDriver(): any;
}
declare namespace DomCapture {
    export { DomCaptureReturnType };
}
declare namespace DomCaptureReturnType {
    export const OBJECT: string;
    export const STRING: string;
}
